
ldr1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08007a80  08007a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bdc  08007bdc  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08007bdc  08007bdc  00017bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007be4  08007be4  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007be4  08007be4  00017be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08007bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          00001cb8  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001e18  20001e18  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012db2  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eac  00000000  00000000  00032f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00035df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f38  00000000  00000000  00036e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a13  00000000  00000000  00037db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000141e2  00000000  00000000  0005b7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc60e  00000000  00000000  0006f9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013bfbb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045d4  00000000  00000000  0013c00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000160 	.word	0x20000160
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a68 	.word	0x08007a68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000164 	.word	0x20000164
 80001c4:	08007a68 	.word	0x08007a68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa2e 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f844 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f908 	bl	80006ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f006 fcf6 	bl	8006ecc <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80004e0:	f000 f8aa 	bl	8000638 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004e4:	2100      	movs	r1, #0
 80004e6:	481a      	ldr	r0, [pc, #104]	; (8000550 <main+0x84>)
 80004e8:	f002 fca4 	bl	8002e34 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (htim3.Instance->CNT > htim3.Instance->CCR1)
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <main+0x84>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <main+0x84>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d903      	bls.n	8000504 <main+0x38>
	  {
		  monitor = 1;
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <main+0x88>)
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	e002      	b.n	800050a <main+0x3e>
	  }
	  else
	  {
		  monitor = 0;
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <main+0x88>)
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
	  }

	  if (strlen(receivebuffer) > 0)
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <main+0x8c>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0ec      	beq.n	80004ec <main+0x20>
	  {
		  if (receivebuffer[0] == 't')
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <main+0x8c>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b74      	cmp	r3, #116	; 0x74
 8000518:	d108      	bne.n	800052c <main+0x60>
		  {
			  htim3.Instance->ARR=atoi(receivebuffer + 1);
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <main+0x90>)
 800051c:	4618      	mov	r0, r3
 800051e:	f007 f9d3 	bl	80078c8 <atoi>
 8000522:	4602      	mov	r2, r0
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <main+0x84>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	62da      	str	r2, [r3, #44]	; 0x2c
 800052a:	e00b      	b.n	8000544 <main+0x78>
		  }
		  else if (receivebuffer[0] == 'd')
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <main+0x8c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b64      	cmp	r3, #100	; 0x64
 8000532:	d107      	bne.n	8000544 <main+0x78>
		  {
			  htim3.Instance->CCR1=atoi(receivebuffer + 1);
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <main+0x90>)
 8000536:	4618      	mov	r0, r3
 8000538:	f007 f9c6 	bl	80078c8 <atoi>
 800053c:	4602      	mov	r2, r0
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <main+0x84>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	635a      	str	r2, [r3, #52]	; 0x34
		  }
		  memset(receivebuffer, 0, 64);
 8000544:	2240      	movs	r2, #64	; 0x40
 8000546:	2100      	movs	r1, #0
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <main+0x8c>)
 800054a:	f007 f9f9 	bl	8007940 <memset>
	  if (htim3.Instance->CNT > htim3.Instance->CCR1)
 800054e:	e7cd      	b.n	80004ec <main+0x20>
 8000550:	200001bc 	.word	0x200001bc
 8000554:	20000204 	.word	0x20000204
 8000558:	2000017c 	.word	0x2000017c
 800055c:	2000017d 	.word	0x2000017d

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f007 f9e6 	bl	8007940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a28      	ldr	r2, [pc, #160]	; (8000630 <SystemClock_Config+0xd0>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <SystemClock_Config+0xd4>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005bc:	2303      	movs	r3, #3
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	2310      	movs	r3, #16
 80005cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005dc:	23c0      	movs	r3, #192	; 0xc0
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 ff61 	bl	80024b4 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005f8:	f000 f8a0 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 f9c4 	bl	80029a4 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000622:	f000 f88b 	bl	800073c <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
 8000656:	615a      	str	r2, [r3, #20]
 8000658:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_TIM3_Init+0xac>)
 800065c:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <MX_TIM3_Init+0xb0>)
 800065e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <MX_TIM3_Init+0xac>)
 8000662:	2200      	movs	r2, #0
 8000664:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_TIM3_Init+0xac>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <MX_TIM3_Init+0xac>)
 800066e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000672:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_TIM3_Init+0xac>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_TIM3_Init+0xac>)
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000680:	4818      	ldr	r0, [pc, #96]	; (80006e4 <MX_TIM3_Init+0xac>)
 8000682:	f002 fb87 	bl	8002d94 <HAL_TIM_PWM_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800068c:	f000 f856 	bl	800073c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4619      	mov	r1, r3
 800069e:	4811      	ldr	r0, [pc, #68]	; (80006e4 <MX_TIM3_Init+0xac>)
 80006a0:	f002 ffc8 	bl	8003634 <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80006aa:	f000 f847 	bl	800073c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ae:	2360      	movs	r3, #96	; 0x60
 80006b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80006b2:	f240 13f3 	movw	r3, #499	; 0x1f3
 80006b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	4807      	ldr	r0, [pc, #28]	; (80006e4 <MX_TIM3_Init+0xac>)
 80006c8:	f002 fc7c 	bl	8002fc4 <HAL_TIM_PWM_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80006d2:	f000 f833 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <MX_TIM3_Init+0xac>)
 80006d8:	f000 f880 	bl	80007dc <HAL_TIM_MspPostInit>

}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	; 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200001bc 	.word	0x200001bc
 80006e8:	40000400 	.word	0x40000400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_GPIO_Init+0x4c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <MX_GPIO_Init+0x4c>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_GPIO_Init+0x4c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_GPIO_Init+0x4c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <MX_GPIO_Init+0x4c>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_GPIO_Init+0x4c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	e7fe      	b.n	8000744 <Error_Handler+0x8>
	...

08000748 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <HAL_MspInit+0x4c>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <HAL_MspInit+0x4c>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6453      	str	r3, [r2, #68]	; 0x44
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <HAL_MspInit+0x4c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_MspInit+0x4c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <HAL_MspInit+0x4c>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d10d      	bne.n	80007c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_TIM_PWM_MspInit+0x40>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a09      	ldr	r2, [pc, #36]	; (80007d8 <HAL_TIM_PWM_MspInit+0x40>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <HAL_TIM_PWM_MspInit+0x40>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40000400 	.word	0x40000400
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a12      	ldr	r2, [pc, #72]	; (8000844 <HAL_TIM_MspPostInit+0x68>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d11d      	bne.n	800083a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_TIM_MspPostInit+0x6c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <HAL_TIM_MspPostInit+0x6c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_TIM_MspPostInit+0x6c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800082a:	2302      	movs	r3, #2
 800082c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_TIM_MspPostInit+0x70>)
 8000836:	f000 fa23 	bl	8000c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40000400 	.word	0x40000400
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f89a 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <OTG_FS_IRQHandler+0x10>)
 80008aa:	f000 fcd5 	bl	8001258 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200016ec 	.word	0x200016ec

080008b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008e2:	490e      	ldr	r1, [pc, #56]	; (800091c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f8:	4c0b      	ldr	r4, [pc, #44]	; (8000928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000906:	f7ff ffd7 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f006 ffe7 	bl	80078dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090e:	f7ff fddd 	bl	80004cc <main>
  bx  lr    
 8000912:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000920:	08007bec 	.word	0x08007bec
  ldr r2, =_sbss
 8000924:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000928:	20001e18 	.word	0x20001e18

0800092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <HAL_Init+0x40>)
 800093a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_Init+0x40>)
 8000946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800094a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x40>)
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f94f 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fef0 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023c00 	.word	0x40023c00

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f967 	bl	8000c66 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f92f 	bl	8000c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000208 	.word	0x20000208

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000208 	.word	0x20000208

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a1c:	f7ff ffee 	bl	80009fc <HAL_GetTick>
 8000a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d005      	beq.n	8000a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_Delay+0x44>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a3a:	bf00      	nop
 8000a3c:	f7ff ffde 	bl	80009fc <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8f7      	bhi.n	8000a3c <HAL_Delay+0x28>
  {
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <__NVIC_EnableIRQ+0x38>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff8e 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff29 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff3e 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff8e 	bl	8000b50 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5d 	bl	8000afc <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff31 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffa2 	bl	8000bb8 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e16b      	b.n	8000f74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f040 815a 	bne.w	8000f6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d005      	beq.n	8000cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d130      	bne.n	8000d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	2203      	movs	r2, #3
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d08:	2201      	movs	r2, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	091b      	lsrs	r3, r3, #4
 8000d1e:	f003 0201 	and.w	r2, r3, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	d017      	beq.n	8000d70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d123      	bne.n	8000dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	f003 0307 	and.w	r3, r3, #7
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	220f      	movs	r2, #15
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	08da      	lsrs	r2, r3, #3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	69b9      	ldr	r1, [r7, #24]
 8000dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0203 	and.w	r2, r3, #3
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 80b4 	beq.w	8000f6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b60      	ldr	r3, [pc, #384]	; (8000f8c <HAL_GPIO_Init+0x30c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a5f      	ldr	r2, [pc, #380]	; (8000f8c <HAL_GPIO_Init+0x30c>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b5d      	ldr	r3, [pc, #372]	; (8000f8c <HAL_GPIO_Init+0x30c>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e22:	4a5b      	ldr	r2, [pc, #364]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a52      	ldr	r2, [pc, #328]	; (8000f94 <HAL_GPIO_Init+0x314>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d02b      	beq.n	8000ea6 <HAL_GPIO_Init+0x226>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a51      	ldr	r2, [pc, #324]	; (8000f98 <HAL_GPIO_Init+0x318>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d025      	beq.n	8000ea2 <HAL_GPIO_Init+0x222>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a50      	ldr	r2, [pc, #320]	; (8000f9c <HAL_GPIO_Init+0x31c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d01f      	beq.n	8000e9e <HAL_GPIO_Init+0x21e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4f      	ldr	r2, [pc, #316]	; (8000fa0 <HAL_GPIO_Init+0x320>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d019      	beq.n	8000e9a <HAL_GPIO_Init+0x21a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4e      	ldr	r2, [pc, #312]	; (8000fa4 <HAL_GPIO_Init+0x324>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d013      	beq.n	8000e96 <HAL_GPIO_Init+0x216>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4d      	ldr	r2, [pc, #308]	; (8000fa8 <HAL_GPIO_Init+0x328>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00d      	beq.n	8000e92 <HAL_GPIO_Init+0x212>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4c      	ldr	r2, [pc, #304]	; (8000fac <HAL_GPIO_Init+0x32c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x20e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4b      	ldr	r2, [pc, #300]	; (8000fb0 <HAL_GPIO_Init+0x330>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_GPIO_Init+0x20a>
 8000e86:	2307      	movs	r3, #7
 8000e88:	e00e      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000e8a:	2308      	movs	r3, #8
 8000e8c:	e00c      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000e8e:	2306      	movs	r3, #6
 8000e90:	e00a      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000e92:	2305      	movs	r3, #5
 8000e94:	e008      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000e96:	2304      	movs	r3, #4
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e004      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <HAL_GPIO_Init+0x228>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	f002 0203 	and.w	r2, r2, #3
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4093      	lsls	r3, r2
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb8:	4935      	ldr	r1, [pc, #212]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eea:	4a32      	ldr	r2, [pc, #200]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f14:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f68:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <HAL_GPIO_Init+0x334>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3301      	adds	r3, #1
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	2b0f      	cmp	r3, #15
 8000f78:	f67f ae90 	bls.w	8000c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40013800 	.word	0x40013800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020c00 	.word	0x40020c00
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40021400 	.word	0x40021400
 8000fac:	40021800 	.word	0x40021800
 8000fb0:	40021c00 	.word	0x40021c00
 8000fb4:	40013c00 	.word	0x40013c00

08000fb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fba:	b08f      	sub	sp, #60	; 0x3c
 8000fbc:	af0a      	add	r7, sp, #40	; 0x28
 8000fbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e10f      	b.n	80011ea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d106      	bne.n	8000fea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f006 f95b 	bl	80072a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fca4 	bl	8003956 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	687e      	ldr	r6, [r7, #4]
 8001016:	466d      	mov	r5, sp
 8001018:	f106 0410 	add.w	r4, r6, #16
 800101c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800101e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001024:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001028:	e885 0003 	stmia.w	r5, {r0, r1}
 800102c:	1d33      	adds	r3, r6, #4
 800102e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f002 fb7b 	bl	800372c <USB_CoreInit>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2202      	movs	r2, #2
 8001040:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0d0      	b.n	80011ea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fc92 	bl	8003978 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e04a      	b.n	80010f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	333d      	adds	r3, #61	; 0x3d
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	333c      	adds	r3, #60	; 0x3c
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	b298      	uxth	r0, r3
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	3344      	adds	r3, #68	; 0x44
 8001096:	4602      	mov	r2, r0
 8001098:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	3340      	adds	r3, #64	; 0x40
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	3348      	adds	r3, #72	; 0x48
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	334c      	adds	r3, #76	; 0x4c
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3354      	adds	r3, #84	; 0x54
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	3301      	adds	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d3af      	bcc.n	800105a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	e044      	b.n	800118a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	3301      	adds	r3, #1
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	429a      	cmp	r2, r3
 8001192:	d3b5      	bcc.n	8001100 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	687e      	ldr	r6, [r7, #4]
 800119c:	466d      	mov	r5, sp
 800119e:	f106 0410 	add.w	r4, r6, #16
 80011a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80011b2:	1d33      	adds	r3, r6, #4
 80011b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f002 fc2a 	bl	8003a10 <USB_DevInit>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2202      	movs	r2, #2
 80011c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00d      	b.n	80011ea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fd79 	bl	8004cda <USB_DevDisconnect>

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <HAL_PCD_Start+0x1c>
 800120a:	2302      	movs	r3, #2
 800120c:	e020      	b.n	8001250 <HAL_PCD_Start+0x5e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121a:	2b01      	cmp	r3, #1
 800121c:	d109      	bne.n	8001232 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001222:	2b01      	cmp	r3, #1
 8001224:	d005      	beq.n	8001232 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f002 fb7c 	bl	8003934 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fd29 	bl	8004c98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b08d      	sub	sp, #52	; 0x34
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f003 fde7 	bl	8004e42 <USB_GetMode>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	f040 848a 	bne.w	8001b90 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f003 fd4b 	bl	8004d1c <USB_ReadInterrupts>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8480 	beq.w	8001b8e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	0a1b      	lsrs	r3, r3, #8
 8001298:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fd38 	bl	8004d1c <USB_ReadInterrupts>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d107      	bne.n	80012c6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	695a      	ldr	r2, [r3, #20]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f002 0202 	and.w	r2, r2, #2
 80012c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 fd26 	bl	8004d1c <USB_ReadInterrupts>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b10      	cmp	r3, #16
 80012d8:	d161      	bne.n	800139e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699a      	ldr	r2, [r3, #24]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0210 	bic.w	r2, r2, #16
 80012e8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	f003 020f 	and.w	r2, r3, #15
 80012f6:	4613      	mov	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	3304      	adds	r3, #4
 8001308:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	0c5b      	lsrs	r3, r3, #17
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	2b02      	cmp	r3, #2
 8001314:	d124      	bne.n	8001360 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d035      	beq.n	800138e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800132c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001330:	b29b      	uxth	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	6a38      	ldr	r0, [r7, #32]
 8001336:	f003 fb5d 	bl	80049f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	691a      	ldr	r2, [r3, #16]
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001346:	441a      	add	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	6a1a      	ldr	r2, [r3, #32]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001358:	441a      	add	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	621a      	str	r2, [r3, #32]
 800135e:	e016      	b.n	800138e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	0c5b      	lsrs	r3, r3, #17
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	2b06      	cmp	r3, #6
 800136a:	d110      	bne.n	800138e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001372:	2208      	movs	r2, #8
 8001374:	4619      	mov	r1, r3
 8001376:	6a38      	ldr	r0, [r7, #32]
 8001378:	f003 fb3c 	bl	80049f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	6a1a      	ldr	r2, [r3, #32]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001388:	441a      	add	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	699a      	ldr	r2, [r3, #24]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0210 	orr.w	r2, r2, #16
 800139c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 fcba 	bl	8004d1c <USB_ReadInterrupts>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013b2:	f040 80a7 	bne.w	8001504 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 fcbf 	bl	8004d42 <USB_ReadDevAllOutEpInterrupt>
 80013c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013c6:	e099      	b.n	80014fc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 808e 	beq.w	80014f0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fce3 	bl	8004daa <USB_ReadDevOutEPInterrupt>
 80013e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00c      	beq.n	800140a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	015a      	lsls	r2, r3, #5
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013fc:	461a      	mov	r2, r3
 80013fe:	2301      	movs	r3, #1
 8001400:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 fec3 	bl	8002190 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00c      	beq.n	800142e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	015a      	lsls	r2, r3, #5
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	4413      	add	r3, r2
 800141c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001420:	461a      	mov	r2, r3
 8001422:	2308      	movs	r3, #8
 8001424:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001426:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 ff99 	bl	8002360 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	4413      	add	r3, r2
 8001440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001444:	461a      	mov	r2, r3
 8001446:	2310      	movs	r3, #16
 8001448:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d030      	beq.n	80014b6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145c:	2b80      	cmp	r3, #128	; 0x80
 800145e:	d109      	bne.n	8001474 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800146e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001472:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	3304      	adds	r3, #4
 8001488:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	78db      	ldrb	r3, [r3, #3]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d108      	bne.n	80014a4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2200      	movs	r2, #0
 8001496:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4619      	mov	r1, r3
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f006 f804 	bl	80074ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	015a      	lsls	r2, r3, #5
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	4413      	add	r3, r2
 80014ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b0:	461a      	mov	r2, r3
 80014b2:	2302      	movs	r3, #2
 80014b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	f003 0320 	and.w	r3, r3, #32
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	015a      	lsls	r2, r3, #5
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014cc:	461a      	mov	r2, r3
 80014ce:	2320      	movs	r3, #32
 80014d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d009      	beq.n	80014f0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	015a      	lsls	r2, r3, #5
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	4413      	add	r3, r2
 80014e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e8:	461a      	mov	r2, r3
 80014ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	3301      	adds	r3, #1
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	085b      	lsrs	r3, r3, #1
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f47f af62 	bne.w	80013c8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fc07 	bl	8004d1c <USB_ReadInterrupts>
 800150e:	4603      	mov	r3, r0
 8001510:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001514:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001518:	f040 80db 	bne.w	80016d2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f003 fc28 	bl	8004d76 <USB_ReadDevAllInEpInterrupt>
 8001526:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800152c:	e0cd      	b.n	80016ca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80c2 	beq.w	80016be <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fc4e 	bl	8004de6 <USB_ReadDevInEPInterrupt>
 800154a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d057      	beq.n	8001606 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	2201      	movs	r2, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800156a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	69f9      	ldr	r1, [r7, #28]
 8001572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001576:	4013      	ands	r3, r2
 8001578:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	015a      	lsls	r2, r3, #5
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	4413      	add	r3, r2
 8001582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001586:	461a      	mov	r2, r3
 8001588:	2301      	movs	r3, #1
 800158a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d132      	bne.n	80015fa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001598:	4613      	mov	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	334c      	adds	r3, #76	; 0x4c
 80015a4:	6819      	ldr	r1, [r3, #0]
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015aa:	4613      	mov	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4403      	add	r3, r0
 80015b4:	3348      	adds	r3, #72	; 0x48
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4419      	add	r1, r3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4403      	add	r3, r0
 80015c8:	334c      	adds	r3, #76	; 0x4c
 80015ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d113      	bne.n	80015fa <HAL_PCD_IRQHandler+0x3a2>
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d6:	4613      	mov	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	3354      	adds	r3, #84	; 0x54
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d108      	bne.n	80015fa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015f2:	461a      	mov	r2, r3
 80015f4:	2101      	movs	r1, #1
 80015f6:	f003 fc55 	bl	8004ea4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	4619      	mov	r1, r3
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f005 fece 	bl	80073a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d008      	beq.n	8001622 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	015a      	lsls	r2, r3, #5
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	4413      	add	r3, r2
 8001618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800161c:	461a      	mov	r2, r3
 800161e:	2308      	movs	r3, #8
 8001620:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d008      	beq.n	800163e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	015a      	lsls	r2, r3, #5
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	4413      	add	r3, r2
 8001634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001638:	461a      	mov	r2, r3
 800163a:	2310      	movs	r3, #16
 800163c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	015a      	lsls	r2, r3, #5
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	4413      	add	r3, r2
 8001650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001654:	461a      	mov	r2, r3
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d023      	beq.n	80016ac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001666:	6a38      	ldr	r0, [r7, #32]
 8001668:	f002 fb36 	bl	8003cd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800166c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	3338      	adds	r3, #56	; 0x38
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	3304      	adds	r3, #4
 800167e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	78db      	ldrb	r3, [r3, #3]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d108      	bne.n	800169a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2200      	movs	r2, #0
 800168c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4619      	mov	r1, r3
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f005 ff1b 	bl	80074d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016a6:	461a      	mov	r2, r3
 80016a8:	2302      	movs	r3, #2
 80016aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fcdb 	bl	8002074 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	3301      	adds	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f47f af2e 	bne.w	800152e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 fb20 	bl	8004d1c <USB_ReadInterrupts>
 80016dc:	4603      	mov	r3, r0
 80016de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016e6:	d122      	bne.n	800172e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800170e:	2100      	movs	r1, #0
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fec3 	bl	800249c <HAL_PCDEx_LPM_Callback>
 8001716:	e002      	b.n	800171e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f005 feb9 	bl	8007490 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800172c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 faf2 	bl	8004d1c <USB_ReadInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800173e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001742:	d112      	bne.n	800176a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f005 fe75 	bl	8007444 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695a      	ldr	r2, [r3, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001768:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f003 fad4 	bl	8004d1c <USB_ReadInterrupts>
 8001774:	4603      	mov	r3, r0
 8001776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177e:	f040 80b7 	bne.w	80018f0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2110      	movs	r1, #16
 800179c:	4618      	mov	r0, r3
 800179e:	f002 fa9b 	bl	8003cd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a6:	e046      	b.n	8001836 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	015a      	lsls	r2, r3, #5
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b4:	461a      	mov	r2, r3
 80017b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017ba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017be:	015a      	lsls	r2, r3, #5
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	4413      	add	r3, r2
 80017c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017cc:	0151      	lsls	r1, r2, #5
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	440a      	add	r2, r1
 80017d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017de:	015a      	lsls	r2, r3, #5
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e8:	461a      	mov	r2, r3
 80017ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017ee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001800:	0151      	lsls	r1, r2, #5
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	440a      	add	r2, r1
 8001806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800180a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800180e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001820:	0151      	lsls	r1, r2, #5
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	440a      	add	r2, r1
 8001826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800182a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800182e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001832:	3301      	adds	r3, #1
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183c:	429a      	cmp	r2, r3
 800183e:	d3b3      	bcc.n	80017a8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001852:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	2b00      	cmp	r3, #0
 800185a:	d016      	beq.n	800188a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800186c:	f043 030b 	orr.w	r3, r3, #11
 8001870:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001882:	f043 030b 	orr.w	r3, r3, #11
 8001886:	6453      	str	r3, [r2, #68]	; 0x44
 8001888:	e015      	b.n	80018b6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001898:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800189c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018a0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b0:	f043 030b 	orr.w	r3, r3, #11
 80018b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018da:	461a      	mov	r2, r3
 80018dc:	f003 fae2 	bl	8004ea4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 fa11 	bl	8004d1c <USB_ReadInterrupts>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001904:	d124      	bne.n	8001950 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f003 faa7 	bl	8004e5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f002 fa5c 	bl	8003dd2 <USB_GetDevSpeed>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681c      	ldr	r4, [r3, #0]
 8001926:	f001 fa29 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 800192a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001930:	b2db      	uxtb	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	4620      	mov	r0, r4
 8001936:	f001 ff5b 	bl	80037f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f005 fd59 	bl	80073f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800194e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 f9e1 	bl	8004d1c <USB_ReadInterrupts>
 800195a:	4603      	mov	r3, r0
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b08      	cmp	r3, #8
 8001962:	d10a      	bne.n	800197a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f005 fd36 	bl	80073d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f002 0208 	and.w	r2, r2, #8
 8001978:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f003 f9cc 	bl	8004d1c <USB_ReadInterrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198a:	2b80      	cmp	r3, #128	; 0x80
 800198c:	d122      	bne.n	80019d4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800199a:	2301      	movs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	e014      	b.n	80019ca <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a4:	4613      	mov	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d105      	bne.n	80019c4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fb27 	bl	8002012 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	3301      	adds	r3, #1
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d3e5      	bcc.n	80019a0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 f99f 	bl	8004d1c <USB_ReadInterrupts>
 80019de:	4603      	mov	r3, r0
 80019e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019e8:	d13b      	bne.n	8001a62 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ea:	2301      	movs	r3, #1
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
 80019ee:	e02b      	b.n	8001a48 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	015a      	lsls	r2, r3, #5
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3340      	adds	r3, #64	; 0x40
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d115      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da12      	bge.n	8001a42 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	333f      	adds	r3, #63	; 0x3f
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 fae8 	bl	8002012 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3301      	adds	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d3ce      	bcc.n	80019f0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 f958 	bl	8004d1c <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a76:	d155      	bne.n	8001b24 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a78:	2301      	movs	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7c:	e045      	b.n	8001b0a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d12e      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001aa6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da2b      	bge.n	8001b04 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ab8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d121      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10a      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b00:	6053      	str	r3, [r2, #4]
            break;
 8001b02:	e007      	b.n	8001b14 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	3301      	adds	r3, #1
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d3b4      	bcc.n	8001a7e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 f8f7 	bl	8004d1c <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b38:	d10a      	bne.n	8001b50 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f005 fcda 	bl	80074f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 f8e1 	bl	8004d1c <USB_ReadInterrupts>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d115      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f005 fcca 	bl	8007510 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6859      	ldr	r1, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	e000      	b.n	8001b90 <HAL_PCD_IRQHandler+0x938>
      return;
 8001b8e:	bf00      	nop
    }
  }
}
 8001b90:	3734      	adds	r7, #52	; 0x34
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd90      	pop	{r4, r7, pc}

08001b96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_PCD_SetAddress+0x1a>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e013      	b.n	8001bd8 <HAL_PCD_SetAddress+0x42>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	78fa      	ldrb	r2, [r7, #3]
 8001bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 f83f 	bl	8004c4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	4608      	mov	r0, r1
 8001bea:	4611      	mov	r1, r2
 8001bec:	461a      	mov	r2, r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	70fb      	strb	r3, [r7, #3]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	803b      	strh	r3, [r7, #0]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	da0f      	bge.n	8001c26 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	3338      	adds	r3, #56	; 0x38
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	705a      	strb	r2, [r3, #1]
 8001c24:	e00f      	b.n	8001c46 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 020f 	and.w	r2, r3, #15
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c52:	883a      	ldrh	r2, [r7, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	78ba      	ldrb	r2, [r7, #2]
 8001c5c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c70:	78bb      	ldrb	r3, [r7, #2]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d102      	bne.n	8001c7c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_PCD_EP_Open+0xaa>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e00e      	b.n	8001ca8 <HAL_PCD_EP_Open+0xc8>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68f9      	ldr	r1, [r7, #12]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 f8bf 	bl	8003e1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da0f      	bge.n	8001ce4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 020f 	and.w	r2, r3, #15
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	3338      	adds	r3, #56	; 0x38
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3304      	adds	r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	705a      	strb	r2, [r3, #1]
 8001ce2:	e00f      	b.n	8001d04 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	f003 020f 	and.w	r2, r3, #15
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_PCD_EP_Close+0x6e>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e00e      	b.n	8001d3c <HAL_PCD_EP_Close+0x8c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68f9      	ldr	r1, [r7, #12]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 f8fd 	bl	8003f2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	460b      	mov	r3, r1
 8001d52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d54:	7afb      	ldrb	r3, [r7, #11]
 8001d56:	f003 020f 	and.w	r2, r3, #15
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2200      	movs	r2, #0
 8001d84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d86:	7afb      	ldrb	r3, [r7, #11]
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d102      	bne.n	8001da0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	6979      	ldr	r1, [r7, #20]
 8001db8:	f002 fbdc 	bl	8004574 <USB_EP0StartXfer>
 8001dbc:	e008      	b.n	8001dd0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	6979      	ldr	r1, [r7, #20]
 8001dcc:	f002 f98a 	bl	80040e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	f003 020f 	and.w	r2, r3, #15
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001dfc:	681b      	ldr	r3, [r3, #0]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	460b      	mov	r3, r1
 8001e18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
 8001e1c:	f003 020f 	and.w	r2, r3, #15
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	3338      	adds	r3, #56	; 0x38
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3304      	adds	r3, #4
 8001e30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2201      	movs	r2, #1
 8001e48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4a:	7afb      	ldrb	r3, [r7, #11]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d102      	bne.n	8001e64 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6979      	ldr	r1, [r7, #20]
 8001e7c:	f002 fb7a 	bl	8004574 <USB_EP0StartXfer>
 8001e80:	e008      	b.n	8001e94 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6979      	ldr	r1, [r7, #20]
 8001e90:	f002 f928 	bl	80040e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	f003 020f 	and.w	r2, r3, #15
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d901      	bls.n	8001ebc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e050      	b.n	8001f5e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	da0f      	bge.n	8001ee4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 020f 	and.w	r2, r3, #15
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	3338      	adds	r3, #56	; 0x38
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3304      	adds	r3, #4
 8001eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	705a      	strb	r2, [r3, #1]
 8001ee2:	e00d      	b.n	8001f00 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_PCD_EP_SetStall+0x82>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e01e      	b.n	8001f5e <HAL_PCD_EP_SetStall+0xc0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68f9      	ldr	r1, [r7, #12]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f002 fdb8 	bl	8004aa4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10a      	bne.n	8001f54 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	b2d9      	uxtb	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f002 ffa8 	bl	8004ea4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	f003 020f 	and.w	r2, r3, #15
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d901      	bls.n	8001f84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e042      	b.n	800200a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	da0f      	bge.n	8001fac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 020f 	and.w	r2, r3, #15
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	3338      	adds	r3, #56	; 0x38
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	705a      	strb	r2, [r3, #1]
 8001faa:	e00f      	b.n	8001fcc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	f003 020f 	and.w	r2, r3, #15
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_PCD_EP_ClrStall+0x86>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e00e      	b.n	800200a <HAL_PCD_EP_ClrStall+0xa4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68f9      	ldr	r1, [r7, #12]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 fdc0 	bl	8004b80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800201e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002022:	2b00      	cmp	r3, #0
 8002024:	da0c      	bge.n	8002040 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 020f 	and.w	r2, r3, #15
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	3338      	adds	r3, #56	; 0x38
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e00c      	b.n	800205a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	3304      	adds	r3, #4
 8002058:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68f9      	ldr	r1, [r7, #12]
 8002060:	4618      	mov	r0, r3
 8002062:	f002 fbdf 	bl	8004824 <USB_EPStopXfer>
 8002066:	4603      	mov	r3, r0
 8002068:	72fb      	strb	r3, [r7, #11]

  return ret;
 800206a:	7afb      	ldrb	r3, [r7, #11]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af02      	add	r7, sp, #8
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	3338      	adds	r3, #56	; 0x38
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	3304      	adds	r3, #4
 800209a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d901      	bls.n	80020ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e06c      	b.n	8002186 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d902      	bls.n	80020c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	3303      	adds	r3, #3
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d0:	e02b      	b.n	800212a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d902      	bls.n	80020ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3303      	adds	r3, #3
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6919      	ldr	r1, [r3, #16]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002106:	b2db      	uxtb	r3, r3
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	4603      	mov	r3, r0
 800210c:	6978      	ldr	r0, [r7, #20]
 800210e:	f002 fc33 	bl	8004978 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	441a      	add	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a1a      	ldr	r2, [r3, #32]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	441a      	add	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	b29b      	uxth	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	429a      	cmp	r2, r3
 800213e:	d809      	bhi.n	8002154 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a1a      	ldr	r2, [r3, #32]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002148:	429a      	cmp	r2, r3
 800214a:	d203      	bcs.n	8002154 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1be      	bne.n	80020d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	429a      	cmp	r2, r3
 800215e:	d811      	bhi.n	8002184 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	2201      	movs	r2, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	43db      	mvns	r3, r3
 800217a:	6939      	ldr	r1, [r7, #16]
 800217c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002180:	4013      	ands	r3, r2
 8002182:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	333c      	adds	r3, #60	; 0x3c
 80021a8:	3304      	adds	r3, #4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d17b      	bne.n	80022be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d015      	beq.n	80021fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	4a61      	ldr	r2, [pc, #388]	; (8002358 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	f240 80b9 	bls.w	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80b3 	beq.w	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f2:	461a      	mov	r2, r3
 80021f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f8:	6093      	str	r3, [r2, #8]
 80021fa:	e0a7      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002212:	461a      	mov	r2, r3
 8002214:	2320      	movs	r3, #32
 8002216:	6093      	str	r3, [r2, #8]
 8002218:	e098      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 8093 	bne.w	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	4a4b      	ldr	r2, [pc, #300]	; (8002358 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d90f      	bls.n	800224e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	4413      	add	r3, r2
 8002240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002244:	461a      	mov	r2, r3
 8002246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800224a:	6093      	str	r3, [r2, #8]
 800224c:	e07e      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	3304      	adds	r3, #4
 8002262:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	69da      	ldr	r2, [r3, #28]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	0159      	lsls	r1, r3, #5
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	440b      	add	r3, r1
 8002270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227a:	1ad2      	subs	r2, r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d114      	bne.n	80022b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002298:	461a      	mov	r2, r3
 800229a:	2101      	movs	r1, #1
 800229c:	f002 fe02 	bl	8004ea4 <USB_EP0_OutStart>
 80022a0:	e006      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	441a      	add	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f005 f858 	bl	800736c <HAL_PCD_DataOutStageCallback>
 80022bc:	e046      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4a26      	ldr	r2, [pc, #152]	; (800235c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d124      	bne.n	8002310 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022dc:	461a      	mov	r2, r3
 80022de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e2:	6093      	str	r3, [r2, #8]
 80022e4:	e032      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fc:	461a      	mov	r2, r3
 80022fe:	2320      	movs	r3, #32
 8002300:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4619      	mov	r1, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f005 f82f 	bl	800736c <HAL_PCD_DataOutStageCallback>
 800230e:	e01d      	b.n	800234c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d114      	bne.n	8002340 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d108      	bne.n	8002340 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002338:	461a      	mov	r2, r3
 800233a:	2100      	movs	r1, #0
 800233c:	f002 fdb2 	bl	8004ea4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f005 f810 	bl	800736c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	4f54300a 	.word	0x4f54300a
 800235c:	4f54310a 	.word	0x4f54310a

08002360 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	333c      	adds	r3, #60	; 0x3c
 8002378:	3304      	adds	r3, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d90e      	bls.n	80023b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800239c:	2b00      	cmp	r3, #0
 800239e:	d009      	beq.n	80023b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f004 ffc7 	bl	8007348 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d90c      	bls.n	80023dc <PCD_EP_OutSetupPacket_int+0x7c>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d108      	bne.n	80023dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023d4:	461a      	mov	r2, r3
 80023d6:	2101      	movs	r1, #1
 80023d8:	f002 fd64 	bl	8004ea4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	4f54300a 	.word	0x4f54300a

080023ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	70fb      	strb	r3, [r7, #3]
 80023f8:	4613      	mov	r3, r2
 80023fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d107      	bne.n	800241a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800240a:	883b      	ldrh	r3, [r7, #0]
 800240c:	0419      	lsls	r1, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	430a      	orrs	r2, r1
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
 8002418:	e028      	b.n	800246c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4413      	add	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e00d      	b.n	800244a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	3340      	adds	r3, #64	; 0x40
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	4413      	add	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	3301      	adds	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	3b01      	subs	r3, #1
 8002450:	429a      	cmp	r2, r3
 8002452:	d3ec      	bcc.n	800242e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002454:	883b      	ldrh	r3, [r7, #0]
 8002456:	0418      	lsls	r0, r3, #16
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	3b01      	subs	r3, #1
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	4302      	orrs	r2, r0
 8002464:	3340      	adds	r3, #64	; 0x40
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e267      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d075      	beq.n	80025be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d2:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d00c      	beq.n	80024f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4b85      	ldr	r3, [pc, #532]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d112      	bne.n	8002510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ea:	4b82      	ldr	r3, [pc, #520]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f6:	d10b      	bne.n	8002510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	4b7e      	ldr	r3, [pc, #504]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d05b      	beq.n	80025bc <HAL_RCC_OscConfig+0x108>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d157      	bne.n	80025bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e242      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d106      	bne.n	8002528 <HAL_RCC_OscConfig+0x74>
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a75      	ldr	r2, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e01d      	b.n	8002564 <HAL_RCC_OscConfig+0xb0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002530:	d10c      	bne.n	800254c <HAL_RCC_OscConfig+0x98>
 8002532:	4b70      	ldr	r3, [pc, #448]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6f      	ldr	r2, [pc, #444]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b6d      	ldr	r3, [pc, #436]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6c      	ldr	r2, [pc, #432]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e00b      	b.n	8002564 <HAL_RCC_OscConfig+0xb0>
 800254c:	4b69      	ldr	r3, [pc, #420]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a68      	ldr	r2, [pc, #416]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b66      	ldr	r3, [pc, #408]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a65      	ldr	r2, [pc, #404]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 800255e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fa46 	bl	80009fc <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe fa42 	bl	80009fc <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e207      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0xc0>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fa32 	bl	80009fc <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe fa2e 	bl	80009fc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1f3      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	4b51      	ldr	r3, [pc, #324]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0xe8>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d063      	beq.n	8002692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ca:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d11c      	bne.n	800261c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e2:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d116      	bne.n	800261c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x152>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e1c7      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4937      	ldr	r1, [pc, #220]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	e03a      	b.n	8002692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002624:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <HAL_RCC_OscConfig+0x244>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe f9e7 	bl	80009fc <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002632:	f7fe f9e3 	bl	80009fc <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1a8      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4925      	ldr	r1, [pc, #148]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]
 8002664:	e015      	b.n	8002692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCC_OscConfig+0x244>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe f9c6 	bl	80009fc <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002674:	f7fe f9c2 	bl	80009fc <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e187      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d036      	beq.n	800270c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d016      	beq.n	80026d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_RCC_OscConfig+0x248>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe f9a6 	bl	80009fc <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b4:	f7fe f9a2 	bl	80009fc <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e167      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_OscConfig+0x240>)
 80026c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x200>
 80026d2:	e01b      	b.n	800270c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_OscConfig+0x248>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026da:	f7fe f98f 	bl	80009fc <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	e00e      	b.n	8002700 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e2:	f7fe f98b 	bl	80009fc <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d907      	bls.n	8002700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e150      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
 80026f4:	40023800 	.word	0x40023800
 80026f8:	42470000 	.word	0x42470000
 80026fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	4b88      	ldr	r3, [pc, #544]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ea      	bne.n	80026e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8097 	beq.w	8002848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271e:	4b81      	ldr	r3, [pc, #516]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b7d      	ldr	r3, [pc, #500]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a7c      	ldr	r2, [pc, #496]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b7a      	ldr	r3, [pc, #488]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002746:	2301      	movs	r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b77      	ldr	r3, [pc, #476]	; (8002928 <HAL_RCC_OscConfig+0x474>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d118      	bne.n	8002788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002756:	4b74      	ldr	r3, [pc, #464]	; (8002928 <HAL_RCC_OscConfig+0x474>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a73      	ldr	r2, [pc, #460]	; (8002928 <HAL_RCC_OscConfig+0x474>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002762:	f7fe f94b 	bl	80009fc <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276a:	f7fe f947 	bl	80009fc <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e10c      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	4b6a      	ldr	r3, [pc, #424]	; (8002928 <HAL_RCC_OscConfig+0x474>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x2ea>
 8002790:	4b64      	ldr	r3, [pc, #400]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	4a63      	ldr	r2, [pc, #396]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	; 0x70
 800279c:	e01c      	b.n	80027d8 <HAL_RCC_OscConfig+0x324>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x30c>
 80027a6:	4b5f      	ldr	r3, [pc, #380]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a5e      	ldr	r2, [pc, #376]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
 80027b2:	4b5c      	ldr	r3, [pc, #368]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a5b      	ldr	r2, [pc, #364]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0x324>
 80027c0:	4b58      	ldr	r3, [pc, #352]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a57      	ldr	r2, [pc, #348]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
 80027cc:	4b55      	ldr	r3, [pc, #340]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a54      	ldr	r2, [pc, #336]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80027d2:	f023 0304 	bic.w	r3, r3, #4
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d015      	beq.n	800280c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7fe f90c 	bl	80009fc <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e8:	f7fe f908 	bl	80009fc <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e0cb      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fe:	4b49      	ldr	r3, [pc, #292]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0ee      	beq.n	80027e8 <HAL_RCC_OscConfig+0x334>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280c:	f7fe f8f6 	bl	80009fc <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002812:	e00a      	b.n	800282a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7fe f8f2 	bl	80009fc <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e0b5      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282a:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1ee      	bne.n	8002814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283c:	4b39      	ldr	r3, [pc, #228]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4a38      	ldr	r2, [pc, #224]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002846:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a1 	beq.w	8002994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002852:	4b34      	ldr	r3, [pc, #208]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b08      	cmp	r3, #8
 800285c:	d05c      	beq.n	8002918 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d141      	bne.n	80028ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	4b31      	ldr	r3, [pc, #196]	; (800292c <HAL_RCC_OscConfig+0x478>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe f8c6 	bl	80009fc <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe f8c2 	bl	80009fc <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e087      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	4b27      	ldr	r3, [pc, #156]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	3b01      	subs	r3, #1
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	491b      	ldr	r1, [pc, #108]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x478>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c2:	f7fe f89b 	bl	80009fc <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe f897 	bl	80009fc <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e05c      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x416>
 80028e8:	e054      	b.n	8002994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_RCC_OscConfig+0x478>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe f884 	bl	80009fc <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe f880 	bl	80009fc <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e045      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_OscConfig+0x470>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x444>
 8002916:	e03d      	b.n	8002994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d107      	bne.n	8002930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e038      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000
 800292c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_RCC_OscConfig+0x4ec>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d028      	beq.n	8002990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d121      	bne.n	8002990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d11a      	bne.n	8002990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002968:	4293      	cmp	r3, r2
 800296a:	d111      	bne.n	8002990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	3b01      	subs	r3, #1
 800297a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d107      	bne.n	8002990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800

080029a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0cc      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b8:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d90c      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b63      	ldr	r3, [pc, #396]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0b8      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f8:	4b59      	ldr	r3, [pc, #356]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a10:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	494d      	ldr	r1, [pc, #308]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d044      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d119      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e07f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d003      	beq.n	8002a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a62:	4b3f      	ldr	r3, [pc, #252]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e06f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a72:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e067      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a82:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f023 0203 	bic.w	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4934      	ldr	r1, [pc, #208]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a94:	f7fd ffb2 	bl	80009fc <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9c:	f7fd ffae 	bl	80009fc <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e04f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 020c 	and.w	r2, r3, #12
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d1eb      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d20c      	bcs.n	8002aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_RCC_ClockConfig+0x1b8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e032      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4916      	ldr	r1, [pc, #88]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	490e      	ldr	r1, [pc, #56]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b2a:	f000 f821 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	490a      	ldr	r1, [pc, #40]	; (8002b64 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	5ccb      	ldrb	r3, [r1, r3]
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x1c8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd ff12 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023c00 	.word	0x40023c00
 8002b60:	40023800 	.word	0x40023800
 8002b64:	08007ac8 	.word	0x08007ac8
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	20000004 	.word	0x20000004

08002b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b74:	b094      	sub	sp, #80	; 0x50
 8002b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b80:	2300      	movs	r3, #0
 8002b82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b88:	4b79      	ldr	r3, [pc, #484]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d00d      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	f200 80e1 	bhi.w	8002d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ba2:	e0db      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ba4:	4b73      	ldr	r3, [pc, #460]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ba8:	e0db      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002baa:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bae:	e0d8      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb0:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bba:	4b6d      	ldr	r3, [pc, #436]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d063      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc6:	4b6a      	ldr	r3, [pc, #424]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	099b      	lsrs	r3, r3, #6
 8002bcc:	2200      	movs	r2, #0
 8002bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bda:	2300      	movs	r3, #0
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002be2:	4622      	mov	r2, r4
 8002be4:	462b      	mov	r3, r5
 8002be6:	f04f 0000 	mov.w	r0, #0
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	0159      	lsls	r1, r3, #5
 8002bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf4:	0150      	lsls	r0, r2, #5
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	1a51      	subs	r1, r2, r1
 8002bfe:	6139      	str	r1, [r7, #16]
 8002c00:	4629      	mov	r1, r5
 8002c02:	eb63 0301 	sbc.w	r3, r3, r1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c14:	4659      	mov	r1, fp
 8002c16:	018b      	lsls	r3, r1, #6
 8002c18:	4651      	mov	r1, sl
 8002c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c1e:	4651      	mov	r1, sl
 8002c20:	018a      	lsls	r2, r1, #6
 8002c22:	4651      	mov	r1, sl
 8002c24:	ebb2 0801 	subs.w	r8, r2, r1
 8002c28:	4659      	mov	r1, fp
 8002c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c42:	4690      	mov	r8, r2
 8002c44:	4699      	mov	r9, r3
 8002c46:	4623      	mov	r3, r4
 8002c48:	eb18 0303 	adds.w	r3, r8, r3
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	462b      	mov	r3, r5
 8002c50:	eb49 0303 	adc.w	r3, r9, r3
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c62:	4629      	mov	r1, r5
 8002c64:	024b      	lsls	r3, r1, #9
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	024a      	lsls	r2, r1, #9
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c76:	2200      	movs	r2, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c80:	f7fd faa2 	bl	80001c8 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c8c:	e058      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8e:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	2200      	movs	r2, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	4611      	mov	r1, r2
 8002c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c9e:	623b      	str	r3, [r7, #32]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ca8:	4642      	mov	r2, r8
 8002caa:	464b      	mov	r3, r9
 8002cac:	f04f 0000 	mov.w	r0, #0
 8002cb0:	f04f 0100 	mov.w	r1, #0
 8002cb4:	0159      	lsls	r1, r3, #5
 8002cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cba:	0150      	lsls	r0, r2, #5
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4641      	mov	r1, r8
 8002cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	00eb      	lsls	r3, r5, #3
 8002cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cf6:	00e2      	lsls	r2, r4, #3
 8002cf8:	4614      	mov	r4, r2
 8002cfa:	461d      	mov	r5, r3
 8002cfc:	4643      	mov	r3, r8
 8002cfe:	18e3      	adds	r3, r4, r3
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	464b      	mov	r3, r9
 8002d04:	eb45 0303 	adc.w	r3, r5, r3
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d16:	4629      	mov	r1, r5
 8002d18:	028b      	lsls	r3, r1, #10
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d20:	4621      	mov	r1, r4
 8002d22:	028a      	lsls	r2, r1, #10
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	61fa      	str	r2, [r7, #28]
 8002d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d34:	f7fd fa48 	bl	80001c8 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3750      	adds	r7, #80	; 0x50
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	007a1200 	.word	0x007a1200

08002d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000000 	.word	0x20000000

08002d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e041      	b.n	8002e2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd fcec 	bl	8000798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f000 f9b8 	bl	8003148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_TIM_PWM_Start+0x24>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e022      	b.n	8002e9e <HAL_TIM_PWM_Start+0x6a>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d109      	bne.n	8002e72 <HAL_TIM_PWM_Start+0x3e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	e015      	b.n	8002e9e <HAL_TIM_PWM_Start+0x6a>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d109      	bne.n	8002e8c <HAL_TIM_PWM_Start+0x58>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e008      	b.n	8002e9e <HAL_TIM_PWM_Start+0x6a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07c      	b.n	8002fa0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d104      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0x82>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb4:	e013      	b.n	8002ede <HAL_TIM_PWM_Start+0xaa>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_PWM_Start+0x92>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec4:	e00b      	b.n	8002ede <HAL_TIM_PWM_Start+0xaa>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0xa2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed4:	e003      	b.n	8002ede <HAL_TIM_PWM_Start+0xaa>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	6839      	ldr	r1, [r7, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fb7e 	bl	80035e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <HAL_TIM_PWM_Start+0x174>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <HAL_TIM_PWM_Start+0xcc>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2c      	ldr	r2, [pc, #176]	; (8002fac <HAL_TIM_PWM_Start+0x178>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_TIM_PWM_Start+0xd0>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_TIM_PWM_Start+0xd2>
 8002f04:	2300      	movs	r3, #0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <HAL_TIM_PWM_Start+0x174>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d022      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d01d      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <HAL_TIM_PWM_Start+0x17c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d018      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <HAL_TIM_PWM_Start+0x180>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1c      	ldr	r2, [pc, #112]	; (8002fb8 <HAL_TIM_PWM_Start+0x184>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00e      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a16      	ldr	r2, [pc, #88]	; (8002fac <HAL_TIM_PWM_Start+0x178>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a18      	ldr	r2, [pc, #96]	; (8002fbc <HAL_TIM_PWM_Start+0x188>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x136>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <HAL_TIM_PWM_Start+0x18c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d111      	bne.n	8002f8e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d010      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8c:	e007      	b.n	8002f9e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40010400 	.word	0x40010400
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	40001800 	.word	0x40001800

08002fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0ae      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	f200 809f 	bhi.w	8003130 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ff2:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	08003131 	.word	0x08003131
 8003000:	08003131 	.word	0x08003131
 8003004:	08003131 	.word	0x08003131
 8003008:	0800306d 	.word	0x0800306d
 800300c:	08003131 	.word	0x08003131
 8003010:	08003131 	.word	0x08003131
 8003014:	08003131 	.word	0x08003131
 8003018:	080030af 	.word	0x080030af
 800301c:	08003131 	.word	0x08003131
 8003020:	08003131 	.word	0x08003131
 8003024:	08003131 	.word	0x08003131
 8003028:	080030ef 	.word	0x080030ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f928 	bl	8003288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0208 	orr.w	r2, r2, #8
 8003046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0204 	bic.w	r2, r2, #4
 8003056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6999      	ldr	r1, [r3, #24]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	619a      	str	r2, [r3, #24]
      break;
 800306a:	e064      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 f978 	bl	8003368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6999      	ldr	r1, [r3, #24]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	021a      	lsls	r2, r3, #8
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	619a      	str	r2, [r3, #24]
      break;
 80030ac:	e043      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f9cd 	bl	8003454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0208 	orr.w	r2, r2, #8
 80030c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0204 	bic.w	r2, r2, #4
 80030d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69d9      	ldr	r1, [r3, #28]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
      break;
 80030ec:	e023      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fa21 	bl	800353c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69d9      	ldr	r1, [r3, #28]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	021a      	lsls	r2, r3, #8
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	61da      	str	r2, [r3, #28]
      break;
 800312e:	e002      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
      break;
 8003134:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800313e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a40      	ldr	r2, [pc, #256]	; (800325c <TIM_Base_SetConfig+0x114>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003166:	d00f      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a3d      	ldr	r2, [pc, #244]	; (8003260 <TIM_Base_SetConfig+0x118>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00b      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a3c      	ldr	r2, [pc, #240]	; (8003264 <TIM_Base_SetConfig+0x11c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d007      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a3b      	ldr	r2, [pc, #236]	; (8003268 <TIM_Base_SetConfig+0x120>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a3a      	ldr	r2, [pc, #232]	; (800326c <TIM_Base_SetConfig+0x124>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d108      	bne.n	800319a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2f      	ldr	r2, [pc, #188]	; (800325c <TIM_Base_SetConfig+0x114>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02b      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a8:	d027      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a2c      	ldr	r2, [pc, #176]	; (8003260 <TIM_Base_SetConfig+0x118>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d023      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a2b      	ldr	r2, [pc, #172]	; (8003264 <TIM_Base_SetConfig+0x11c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01f      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a2a      	ldr	r2, [pc, #168]	; (8003268 <TIM_Base_SetConfig+0x120>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01b      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a29      	ldr	r2, [pc, #164]	; (800326c <TIM_Base_SetConfig+0x124>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d017      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a28      	ldr	r2, [pc, #160]	; (8003270 <TIM_Base_SetConfig+0x128>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a27      	ldr	r2, [pc, #156]	; (8003274 <TIM_Base_SetConfig+0x12c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00f      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a26      	ldr	r2, [pc, #152]	; (8003278 <TIM_Base_SetConfig+0x130>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a25      	ldr	r2, [pc, #148]	; (800327c <TIM_Base_SetConfig+0x134>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a24      	ldr	r2, [pc, #144]	; (8003280 <TIM_Base_SetConfig+0x138>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a23      	ldr	r2, [pc, #140]	; (8003284 <TIM_Base_SetConfig+0x13c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d108      	bne.n	800320c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <TIM_Base_SetConfig+0x114>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d003      	beq.n	8003240 <TIM_Base_SetConfig+0xf8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a0c      	ldr	r2, [pc, #48]	; (800326c <TIM_Base_SetConfig+0x124>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d103      	bne.n	8003248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	615a      	str	r2, [r3, #20]
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40010000 	.word	0x40010000
 8003260:	40000400 	.word	0x40000400
 8003264:	40000800 	.word	0x40000800
 8003268:	40000c00 	.word	0x40000c00
 800326c:	40010400 	.word	0x40010400
 8003270:	40014000 	.word	0x40014000
 8003274:	40014400 	.word	0x40014400
 8003278:	40014800 	.word	0x40014800
 800327c:	40001800 	.word	0x40001800
 8003280:	40001c00 	.word	0x40001c00
 8003284:	40002000 	.word	0x40002000

08003288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f023 0201 	bic.w	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f023 0302 	bic.w	r3, r3, #2
 80032d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a20      	ldr	r2, [pc, #128]	; (8003360 <TIM_OC1_SetConfig+0xd8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_OC1_SetConfig+0x64>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <TIM_OC1_SetConfig+0xdc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10c      	bne.n	8003306 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0308 	bic.w	r3, r3, #8
 80032f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a15      	ldr	r2, [pc, #84]	; (8003360 <TIM_OC1_SetConfig+0xd8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <TIM_OC1_SetConfig+0x8e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a14      	ldr	r2, [pc, #80]	; (8003364 <TIM_OC1_SetConfig+0xdc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d111      	bne.n	800333a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800331c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	621a      	str	r2, [r3, #32]
}
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40010000 	.word	0x40010000
 8003364:	40010400 	.word	0x40010400

08003368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f023 0210 	bic.w	r2, r3, #16
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0320 	bic.w	r3, r3, #32
 80033b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a22      	ldr	r2, [pc, #136]	; (800344c <TIM_OC2_SetConfig+0xe4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d003      	beq.n	80033d0 <TIM_OC2_SetConfig+0x68>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a21      	ldr	r2, [pc, #132]	; (8003450 <TIM_OC2_SetConfig+0xe8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10d      	bne.n	80033ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a17      	ldr	r2, [pc, #92]	; (800344c <TIM_OC2_SetConfig+0xe4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_OC2_SetConfig+0x94>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a16      	ldr	r2, [pc, #88]	; (8003450 <TIM_OC2_SetConfig+0xe8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d113      	bne.n	8003424 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800340a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40010000 	.word	0x40010000
 8003450:	40010400 	.word	0x40010400

08003454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800349c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a21      	ldr	r2, [pc, #132]	; (8003534 <TIM_OC3_SetConfig+0xe0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <TIM_OC3_SetConfig+0x66>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a20      	ldr	r2, [pc, #128]	; (8003538 <TIM_OC3_SetConfig+0xe4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10d      	bne.n	80034d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <TIM_OC3_SetConfig+0xe0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d003      	beq.n	80034e6 <TIM_OC3_SetConfig+0x92>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a15      	ldr	r2, [pc, #84]	; (8003538 <TIM_OC3_SetConfig+0xe4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d113      	bne.n	800350e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	621a      	str	r2, [r3, #32]
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40010000 	.word	0x40010000
 8003538:	40010400 	.word	0x40010400

0800353c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	031b      	lsls	r3, r3, #12
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <TIM_OC4_SetConfig+0xa4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_OC4_SetConfig+0x68>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <TIM_OC4_SetConfig+0xa8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d109      	bne.n	80035b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	019b      	lsls	r3, r3, #6
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	621a      	str	r2, [r3, #32]
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40010400 	.word	0x40010400

080035e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2201      	movs	r2, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1a      	ldr	r2, [r3, #32]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	43db      	mvns	r3, r3
 800360a:	401a      	ands	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a1a      	ldr	r2, [r3, #32]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	431a      	orrs	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003648:	2302      	movs	r3, #2
 800364a:	e05a      	b.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a21      	ldr	r2, [pc, #132]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d022      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003698:	d01d      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d018      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1a      	ldr	r2, [pc, #104]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a18      	ldr	r2, [pc, #96]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a17      	ldr	r2, [pc, #92]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a15      	ldr	r2, [pc, #84]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10c      	bne.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40010000 	.word	0x40010000
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800
 800371c:	40000c00 	.word	0x40000c00
 8003720:	40010400 	.word	0x40010400
 8003724:	40014000 	.word	0x40014000
 8003728:	40001800 	.word	0x40001800

0800372c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800372c:	b084      	sub	sp, #16
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	f107 001c 	add.w	r0, r7, #28
 800373a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	2b01      	cmp	r3, #1
 8003742:	d122      	bne.n	800378a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800376c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d105      	bne.n	800377e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f001 fbee 	bl	8004f60 <USB_CoreReset>
 8003784:	4603      	mov	r3, r0
 8003786:	73fb      	strb	r3, [r7, #15]
 8003788:	e01a      	b.n	80037c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f001 fbe2 	bl	8004f60 <USB_CoreReset>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
 80037b2:	e005      	b.n	80037c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d10b      	bne.n	80037de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f043 0206 	orr.w	r2, r3, #6
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037ea:	b004      	add	sp, #16
 80037ec:	4770      	bx	lr
	...

080037f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	4613      	mov	r3, r2
 80037fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d165      	bne.n	80038d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4a41      	ldr	r2, [pc, #260]	; (800390c <USB_SetTurnaroundTime+0x11c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d906      	bls.n	800381a <USB_SetTurnaroundTime+0x2a>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4a40      	ldr	r2, [pc, #256]	; (8003910 <USB_SetTurnaroundTime+0x120>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d202      	bcs.n	800381a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003814:	230f      	movs	r3, #15
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e062      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4a3c      	ldr	r2, [pc, #240]	; (8003910 <USB_SetTurnaroundTime+0x120>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d306      	bcc.n	8003830 <USB_SetTurnaroundTime+0x40>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4a3b      	ldr	r2, [pc, #236]	; (8003914 <USB_SetTurnaroundTime+0x124>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d202      	bcs.n	8003830 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800382a:	230e      	movs	r3, #14
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e057      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4a38      	ldr	r2, [pc, #224]	; (8003914 <USB_SetTurnaroundTime+0x124>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d306      	bcc.n	8003846 <USB_SetTurnaroundTime+0x56>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4a37      	ldr	r2, [pc, #220]	; (8003918 <USB_SetTurnaroundTime+0x128>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d202      	bcs.n	8003846 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003840:	230d      	movs	r3, #13
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	e04c      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4a33      	ldr	r2, [pc, #204]	; (8003918 <USB_SetTurnaroundTime+0x128>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d306      	bcc.n	800385c <USB_SetTurnaroundTime+0x6c>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4a32      	ldr	r2, [pc, #200]	; (800391c <USB_SetTurnaroundTime+0x12c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d802      	bhi.n	800385c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003856:	230c      	movs	r3, #12
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	e041      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4a2f      	ldr	r2, [pc, #188]	; (800391c <USB_SetTurnaroundTime+0x12c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d906      	bls.n	8003872 <USB_SetTurnaroundTime+0x82>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4a2e      	ldr	r2, [pc, #184]	; (8003920 <USB_SetTurnaroundTime+0x130>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d802      	bhi.n	8003872 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800386c:	230b      	movs	r3, #11
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	e036      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <USB_SetTurnaroundTime+0x130>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d906      	bls.n	8003888 <USB_SetTurnaroundTime+0x98>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4a29      	ldr	r2, [pc, #164]	; (8003924 <USB_SetTurnaroundTime+0x134>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d802      	bhi.n	8003888 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003882:	230a      	movs	r3, #10
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e02b      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4a26      	ldr	r2, [pc, #152]	; (8003924 <USB_SetTurnaroundTime+0x134>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d906      	bls.n	800389e <USB_SetTurnaroundTime+0xae>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4a25      	ldr	r2, [pc, #148]	; (8003928 <USB_SetTurnaroundTime+0x138>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d202      	bcs.n	800389e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003898:	2309      	movs	r3, #9
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e020      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4a21      	ldr	r2, [pc, #132]	; (8003928 <USB_SetTurnaroundTime+0x138>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d306      	bcc.n	80038b4 <USB_SetTurnaroundTime+0xc4>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4a20      	ldr	r2, [pc, #128]	; (800392c <USB_SetTurnaroundTime+0x13c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d802      	bhi.n	80038b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038ae:	2308      	movs	r3, #8
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e015      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4a1d      	ldr	r2, [pc, #116]	; (800392c <USB_SetTurnaroundTime+0x13c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d906      	bls.n	80038ca <USB_SetTurnaroundTime+0xda>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <USB_SetTurnaroundTime+0x140>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d202      	bcs.n	80038ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80038c4:	2307      	movs	r3, #7
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e00a      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80038ca:	2306      	movs	r3, #6
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e007      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80038d6:	2309      	movs	r3, #9
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e001      	b.n	80038e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038dc:	2309      	movs	r3, #9
 80038de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	029b      	lsls	r3, r3, #10
 80038f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80038f8:	431a      	orrs	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	00d8acbf 	.word	0x00d8acbf
 8003910:	00e4e1c0 	.word	0x00e4e1c0
 8003914:	00f42400 	.word	0x00f42400
 8003918:	01067380 	.word	0x01067380
 800391c:	011a499f 	.word	0x011a499f
 8003920:	01312cff 	.word	0x01312cff
 8003924:	014ca43f 	.word	0x014ca43f
 8003928:	016e3600 	.word	0x016e3600
 800392c:	01a6ab1f 	.word	0x01a6ab1f
 8003930:	01e84800 	.word	0x01e84800

08003934 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 0201 	bic.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d115      	bne.n	80039c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039a6:	2001      	movs	r0, #1
 80039a8:	f7fd f834 	bl	8000a14 <HAL_Delay>
      ms++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3301      	adds	r3, #1
 80039b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f001 fa45 	bl	8004e42 <USB_GetMode>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d01e      	beq.n	80039fc <USB_SetCurrentMode+0x84>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b31      	cmp	r3, #49	; 0x31
 80039c2:	d9f0      	bls.n	80039a6 <USB_SetCurrentMode+0x2e>
 80039c4:	e01a      	b.n	80039fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d115      	bne.n	80039f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039d8:	2001      	movs	r0, #1
 80039da:	f7fd f81b 	bl	8000a14 <HAL_Delay>
      ms++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3301      	adds	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f001 fa2c 	bl	8004e42 <USB_GetMode>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <USB_SetCurrentMode+0x84>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b31      	cmp	r3, #49	; 0x31
 80039f4:	d9f0      	bls.n	80039d8 <USB_SetCurrentMode+0x60>
 80039f6:	e001      	b.n	80039fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e005      	b.n	8003a08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b32      	cmp	r3, #50	; 0x32
 8003a00:	d101      	bne.n	8003a06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a10:	b084      	sub	sp, #16
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b086      	sub	sp, #24
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	e009      	b.n	8003a44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	3340      	adds	r3, #64	; 0x40
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	3301      	adds	r3, #1
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b0e      	cmp	r3, #14
 8003a48:	d9f2      	bls.n	8003a30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d11c      	bne.n	8003a8a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a5e:	f043 0302 	orr.w	r3, r3, #2
 8003a62:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38
 8003a88:	e00b      	b.n	8003aa2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2300      	movs	r3, #0
 8003aac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abc:	461a      	mov	r2, r3
 8003abe:	680b      	ldr	r3, [r1, #0]
 8003ac0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10c      	bne.n	8003ae2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d104      	bne.n	8003ad8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ace:	2100      	movs	r1, #0
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f965 	bl	8003da0 <USB_SetDevSpeed>
 8003ad6:	e008      	b.n	8003aea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ad8:	2101      	movs	r1, #1
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f960 	bl	8003da0 <USB_SetDevSpeed>
 8003ae0:	e003      	b.n	8003aea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ae2:	2103      	movs	r1, #3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f95b 	bl	8003da0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003aea:	2110      	movs	r1, #16
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f8f3 	bl	8003cd8 <USB_FlushTxFifo>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f91f 	bl	8003d40 <USB_FlushRxFifo>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b12:	461a      	mov	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2300      	movs	r3, #0
 8003b22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	e043      	b.n	8003bbe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b4c:	d118      	bne.n	8003b80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	461a      	mov	r2, r3
 8003b62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	e013      	b.n	8003b92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b76:	461a      	mov	r2, r3
 8003b78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e008      	b.n	8003b92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2300      	movs	r3, #0
 8003b90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d3b7      	bcc.n	8003b36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	e043      	b.n	8003c54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be2:	d118      	bne.n	8003c16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e013      	b.n	8003c28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e008      	b.n	8003c28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c22:	461a      	mov	r2, r3
 8003c24:	2300      	movs	r3, #0
 8003c26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c34:	461a      	mov	r2, r3
 8003c36:	2300      	movs	r3, #0
 8003c38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	461a      	mov	r2, r3
 8003c48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	3301      	adds	r3, #1
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d3b7      	bcc.n	8003bcc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f043 0210 	orr.w	r2, r3, #16
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699a      	ldr	r2, [r3, #24]
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <USB_DevInit+0x2c4>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f043 0208 	orr.w	r2, r3, #8
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d107      	bne.n	8003cc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cd0:	b004      	add	sp, #16
 8003cd2:	4770      	bx	lr
 8003cd4:	803c3800 	.word	0x803c3800

08003cd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <USB_FlushTxFifo+0x64>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e01b      	b.n	8003d30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	daf2      	bge.n	8003ce6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	019b      	lsls	r3, r3, #6
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <USB_FlushTxFifo+0x64>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e006      	b.n	8003d30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d0f0      	beq.n	8003d10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	00030d40 	.word	0x00030d40

08003d40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4a11      	ldr	r2, [pc, #68]	; (8003d9c <USB_FlushRxFifo+0x5c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e018      	b.n	8003d90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	daf2      	bge.n	8003d4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3301      	adds	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a08      	ldr	r2, [pc, #32]	; (8003d9c <USB_FlushRxFifo+0x5c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e006      	b.n	8003d90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b10      	cmp	r3, #16
 8003d8c:	d0f0      	beq.n	8003d70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	00030d40 	.word	0x00030d40

08003da0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	68f9      	ldr	r1, [r7, #12]
 8003dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b087      	sub	sp, #28
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0306 	and.w	r3, r3, #6
 8003dea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d102      	bne.n	8003df8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]
 8003df6:	e00a      	b.n	8003e0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d002      	beq.n	8003e04 <USB_GetDevSpeed+0x32>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b06      	cmp	r3, #6
 8003e02:	d102      	bne.n	8003e0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e04:	2302      	movs	r3, #2
 8003e06:	75fb      	strb	r3, [r7, #23]
 8003e08:	e001      	b.n	8003e0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e0a:	230f      	movs	r3, #15
 8003e0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d13a      	bne.n	8003eae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	2101      	movs	r1, #1
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	68f9      	ldr	r1, [r7, #12]
 8003e52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d155      	bne.n	8003f1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	791b      	ldrb	r3, [r3, #4]
 8003e8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	059b      	lsls	r3, r3, #22
 8003e92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e94:	4313      	orrs	r3, r2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	e036      	b.n	8003f1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d11a      	bne.n	8003f1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	791b      	ldrb	r3, [r3, #4]
 8003f00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f02:	430b      	orrs	r3, r1
 8003f04:	4313      	orrs	r3, r2
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	0151      	lsls	r1, r2, #5
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	785b      	ldrb	r3, [r3, #1]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d161      	bne.n	800400c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f5e:	d11f      	bne.n	8003fa0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	0151      	lsls	r1, r2, #5
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	440a      	add	r2, r1
 8003f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	0151      	lsls	r1, r2, #5
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	440a      	add	r2, r1
 8003f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	68f9      	ldr	r1, [r7, #12]
 8003fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	0159      	lsls	r1, r3, #5
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	440b      	add	r3, r1
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004002:	4619      	mov	r1, r3
 8004004:	4b35      	ldr	r3, [pc, #212]	; (80040dc <USB_DeactivateEndpoint+0x1b0>)
 8004006:	4013      	ands	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
 800400a:	e060      	b.n	80040ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800401e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004022:	d11f      	bne.n	8004064 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	0151      	lsls	r1, r2, #5
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	440a      	add	r2, r1
 800403a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004042:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	440a      	add	r2, r1
 800405a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800405e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004062:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	2101      	movs	r1, #1
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	041b      	lsls	r3, r3, #16
 800407c:	43db      	mvns	r3, r3
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004084:	4013      	ands	r3, r2
 8004086:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	2101      	movs	r1, #1
 800409a:	fa01 f303 	lsl.w	r3, r1, r3
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	43db      	mvns	r3, r3
 80040a2:	68f9      	ldr	r1, [r7, #12]
 80040a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040a8:	4013      	ands	r3, r2
 80040aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	0159      	lsls	r1, r3, #5
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	440b      	add	r3, r1
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	4619      	mov	r1, r3
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <USB_DeactivateEndpoint+0x1b4>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	ec337800 	.word	0xec337800
 80040e0:	eff37800 	.word	0xeff37800

080040e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	; 0x28
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	2b01      	cmp	r3, #1
 8004102:	f040 815c 	bne.w	80043be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d132      	bne.n	8004174 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	0151      	lsls	r1, r2, #5
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	440a      	add	r2, r1
 8004124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004128:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800412c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004130:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	0151      	lsls	r1, r2, #5
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	440a      	add	r2, r1
 8004148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004150:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	440a      	add	r2, r1
 8004168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800416c:	0cdb      	lsrs	r3, r3, #19
 800416e:	04db      	lsls	r3, r3, #19
 8004170:	6113      	str	r3, [r2, #16]
 8004172:	e074      	b.n	800425e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	0151      	lsls	r1, r2, #5
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	440a      	add	r2, r1
 800418a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800418e:	0cdb      	lsrs	r3, r3, #19
 8004190:	04db      	lsls	r3, r3, #19
 8004192:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	440b      	add	r3, r1
 80041d0:	1e59      	subs	r1, r3, #1
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80041da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80041dc:	4b9d      	ldr	r3, [pc, #628]	; (8004454 <USB_EPStartXfer+0x370>)
 80041de:	400b      	ands	r3, r1
 80041e0:	69b9      	ldr	r1, [r7, #24]
 80041e2:	0148      	lsls	r0, r1, #5
 80041e4:	69f9      	ldr	r1, [r7, #28]
 80041e6:	4401      	add	r1, r0
 80041e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041ec:	4313      	orrs	r3, r2
 80041ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004206:	69b9      	ldr	r1, [r7, #24]
 8004208:	0148      	lsls	r0, r1, #5
 800420a:	69f9      	ldr	r1, [r7, #28]
 800420c:	4401      	add	r1, r0
 800420e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004212:	4313      	orrs	r3, r2
 8004214:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	791b      	ldrb	r3, [r3, #4]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d11f      	bne.n	800425e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	0151      	lsls	r1, r2, #5
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	440a      	add	r2, r1
 8004234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004238:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800423c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	0151      	lsls	r1, r2, #5
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	440a      	add	r2, r1
 8004254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004258:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800425c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d14b      	bne.n	80042fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004278:	461a      	mov	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	791b      	ldrb	r3, [r3, #4]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d128      	bne.n	80042da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d110      	bne.n	80042ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	e00f      	b.n	80042da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	0151      	lsls	r1, r2, #5
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	440a      	add	r2, r1
 80042d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	0151      	lsls	r1, r2, #5
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	440a      	add	r2, r1
 80042f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e133      	b.n	8004564 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004316:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800431a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	791b      	ldrb	r3, [r3, #4]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d015      	beq.n	8004350 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 811b 	beq.w	8004564 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	2101      	movs	r1, #1
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	69f9      	ldr	r1, [r7, #28]
 8004346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800434a:	4313      	orrs	r3, r2
 800434c:	634b      	str	r3, [r1, #52]	; 0x34
 800434e:	e109      	b.n	8004564 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d110      	bne.n	8004382 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	0151      	lsls	r1, r2, #5
 8004372:	69fa      	ldr	r2, [r7, #28]
 8004374:	440a      	add	r2, r1
 8004376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	e00f      	b.n	80043a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	0151      	lsls	r1, r2, #5
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	440a      	add	r2, r1
 8004398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6919      	ldr	r1, [r3, #16]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	b298      	uxth	r0, r3
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	4603      	mov	r3, r0
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fade 	bl	8004978 <USB_WritePacket>
 80043bc:	e0d2      	b.n	8004564 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d8:	0cdb      	lsrs	r3, r3, #19
 80043da:	04db      	lsls	r3, r3, #19
 80043dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	0151      	lsls	r1, r2, #5
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	440a      	add	r2, r1
 80043f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004400:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d126      	bne.n	8004458 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004420:	69b9      	ldr	r1, [r7, #24]
 8004422:	0148      	lsls	r0, r1, #5
 8004424:	69f9      	ldr	r1, [r7, #28]
 8004426:	4401      	add	r1, r0
 8004428:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800442c:	4313      	orrs	r3, r2
 800442e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800444a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800444e:	6113      	str	r3, [r2, #16]
 8004450:	e03a      	b.n	80044c8 <USB_EPStartXfer+0x3e4>
 8004452:	bf00      	nop
 8004454:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4413      	add	r3, r2
 8004462:	1e5a      	subs	r2, r3, #1
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	8afa      	ldrh	r2, [r7, #22]
 8004474:	fb03 f202 	mul.w	r2, r3, r2
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	8afb      	ldrh	r3, [r7, #22]
 800448c:	04d9      	lsls	r1, r3, #19
 800448e:	4b38      	ldr	r3, [pc, #224]	; (8004570 <USB_EPStartXfer+0x48c>)
 8004490:	400b      	ands	r3, r1
 8004492:	69b9      	ldr	r1, [r7, #24]
 8004494:	0148      	lsls	r0, r1, #5
 8004496:	69f9      	ldr	r1, [r7, #28]
 8004498:	4401      	add	r1, r0
 800449a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800449e:	4313      	orrs	r3, r2
 80044a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b8:	69b9      	ldr	r1, [r7, #24]
 80044ba:	0148      	lsls	r0, r1, #5
 80044bc:	69f9      	ldr	r1, [r7, #28]
 80044be:	4401      	add	r1, r0
 80044c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044c4:	4313      	orrs	r3, r2
 80044c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d10d      	bne.n	80044ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6919      	ldr	r1, [r3, #16]
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	460a      	mov	r2, r1
 80044e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	791b      	ldrb	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d128      	bne.n	8004544 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d110      	bne.n	8004524 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	0151      	lsls	r1, r2, #5
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	440a      	add	r2, r1
 8004518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800451c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e00f      	b.n	8004544 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004542:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	0151      	lsls	r1, r2, #5
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	440a      	add	r2, r1
 800455a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800455e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004562:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	1ff80000 	.word	0x1ff80000

08004574 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	4613      	mov	r3, r2
 8004580:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	2b01      	cmp	r3, #1
 8004592:	f040 80ce 	bne.w	8004732 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d132      	bne.n	8004604 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	0151      	lsls	r1, r2, #5
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	440a      	add	r2, r1
 80045f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045fc:	0cdb      	lsrs	r3, r3, #19
 80045fe:	04db      	lsls	r3, r3, #19
 8004600:	6113      	str	r3, [r2, #16]
 8004602:	e04e      	b.n	80046a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461e:	0cdb      	lsrs	r3, r3, #19
 8004620:	04db      	lsls	r3, r3, #19
 8004622:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800463e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004642:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004646:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	429a      	cmp	r2, r3
 8004652:	d903      	bls.n	800465c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800467a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004692:	6939      	ldr	r1, [r7, #16]
 8004694:	0148      	lsls	r0, r1, #5
 8004696:	6979      	ldr	r1, [r7, #20]
 8004698:	4401      	add	r1, r0
 800469a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800469e:	4313      	orrs	r3, r2
 80046a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d11e      	bne.n	80046e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046bc:	461a      	mov	r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e097      	b.n	8004816 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	0151      	lsls	r1, r2, #5
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	440a      	add	r2, r1
 80046fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004700:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004704:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8083 	beq.w	8004816 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	2101      	movs	r1, #1
 8004722:	fa01 f303 	lsl.w	r3, r1, r3
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800472c:	4313      	orrs	r3, r2
 800472e:	634b      	str	r3, [r1, #52]	; 0x34
 8004730:	e071      	b.n	8004816 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474c:	0cdb      	lsrs	r3, r3, #19
 800474e:	04db      	lsls	r3, r3, #19
 8004750:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	0151      	lsls	r1, r2, #5
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	440a      	add	r2, r1
 8004768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004770:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004774:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c4:	6939      	ldr	r1, [r7, #16]
 80047c6:	0148      	lsls	r0, r1, #5
 80047c8:	6979      	ldr	r1, [r7, #20]
 80047ca:	4401      	add	r1, r0
 80047cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047d0:	4313      	orrs	r3, r2
 80047d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d10d      	bne.n	80047f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6919      	ldr	r1, [r3, #16]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	460a      	mov	r2, r1
 80047f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004810:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004814:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	785b      	ldrb	r3, [r3, #1]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d14a      	bne.n	80048d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800485a:	f040 8086 	bne.w	800496a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004880:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	7812      	ldrb	r2, [r2, #0]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d902      	bls.n	80048bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	75fb      	strb	r3, [r7, #23]
          break;
 80048ba:	e056      	b.n	800496a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d4:	d0e7      	beq.n	80048a6 <USB_EPStopXfer+0x82>
 80048d6:	e048      	b.n	800496a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048f0:	d13b      	bne.n	800496a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	7812      	ldrb	r2, [r2, #0]
 8004906:	0151      	lsls	r1, r2, #5
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	440a      	add	r2, r1
 800490c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004910:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004914:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	7812      	ldrb	r2, [r2, #0]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004938:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3301      	adds	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f242 7210 	movw	r2, #10000	; 0x2710
 8004946:	4293      	cmp	r3, r2
 8004948:	d902      	bls.n	8004950 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
          break;
 800494e:	e00c      	b.n	800496a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004968:	d0e7      	beq.n	800493a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800496a:	7dfb      	ldrb	r3, [r7, #23]
}
 800496c:	4618      	mov	r0, r3
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004978:	b480      	push	{r7}
 800497a:	b089      	sub	sp, #36	; 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	4611      	mov	r1, r2
 8004984:	461a      	mov	r2, r3
 8004986:	460b      	mov	r3, r1
 8004988:	71fb      	strb	r3, [r7, #7]
 800498a:	4613      	mov	r3, r2
 800498c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800499a:	2b00      	cmp	r3, #0
 800499c:	d123      	bne.n	80049e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800499e:	88bb      	ldrh	r3, [r7, #4]
 80049a0:	3303      	adds	r3, #3
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e018      	b.n	80049de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	031a      	lsls	r2, r3, #12
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b8:	461a      	mov	r2, r3
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	3301      	adds	r3, #1
 80049c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3301      	adds	r3, #1
 80049ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	3301      	adds	r3, #1
 80049d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3301      	adds	r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	3301      	adds	r3, #1
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d3e2      	bcc.n	80049ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3724      	adds	r7, #36	; 0x24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b08b      	sub	sp, #44	; 0x2c
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	089b      	lsrs	r3, r3, #2
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	623b      	str	r3, [r7, #32]
 8004a1e:	e014      	b.n	8004a4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	3301      	adds	r3, #1
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	3301      	adds	r3, #1
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	3301      	adds	r3, #1
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	3301      	adds	r3, #1
 8004a48:	623b      	str	r3, [r7, #32]
 8004a4a:	6a3a      	ldr	r2, [r7, #32]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d3e6      	bcc.n	8004a20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a52:	8bfb      	ldrh	r3, [r7, #30]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01e      	beq.n	8004a96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a62:	461a      	mov	r2, r3
 8004a64:	f107 0310 	add.w	r3, r7, #16
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	701a      	strb	r2, [r3, #0]
      i++;
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	3301      	adds	r3, #1
 8004a82:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	3301      	adds	r3, #1
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a8a:	8bfb      	ldrh	r3, [r7, #30]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a90:	8bfb      	ldrh	r3, [r7, #30]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1ea      	bne.n	8004a6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	372c      	adds	r7, #44	; 0x2c
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d12c      	bne.n	8004b1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	db12      	blt.n	8004af8 <USB_EPSetStall+0x54>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00f      	beq.n	8004af8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004af6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	e02b      	b.n	8004b72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	db12      	blt.n	8004b52 <USB_EPSetStall+0xae>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00f      	beq.n	8004b52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d128      	bne.n	8004bee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	791b      	ldrb	r3, [r3, #4]
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d003      	beq.n	8004bcc <USB_EPClearStall+0x4c>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	791b      	ldrb	r3, [r3, #4]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d138      	bne.n	8004c3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	0151      	lsls	r1, r2, #5
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	440a      	add	r2, r1
 8004be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	e027      	b.n	8004c3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	791b      	ldrb	r3, [r3, #4]
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d003      	beq.n	8004c1e <USB_EPClearStall+0x9e>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	791b      	ldrb	r3, [r3, #4]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d10f      	bne.n	8004c3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c80:	68f9      	ldr	r1, [r7, #12]
 8004c82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc6:	f023 0302 	bic.w	r3, r3, #2
 8004cca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cf4:	f023 0303 	bic.w	r3, r3, #3
 8004cf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d08:	f043 0302 	orr.w	r3, r3, #2
 8004d0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4013      	ands	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d34:	68fb      	ldr	r3, [r7, #12]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	4013      	ands	r3, r2
 8004d64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	0c1b      	lsrs	r3, r3, #16
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	4013      	ands	r3, r2
 8004d98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	b29b      	uxth	r3, r3
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	460b      	mov	r3, r1
 8004db4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b087      	sub	sp, #28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	fa22 f303 	lsr.w	r3, r2, r3
 8004e16:	01db      	lsls	r3, r3, #7
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4013      	ands	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e34:	68bb      	ldr	r3, [r7, #8]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b085      	sub	sp, #20
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e7c:	f023 0307 	bic.w	r3, r3, #7
 8004e80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	460b      	mov	r3, r1
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	333c      	adds	r3, #60	; 0x3c
 8004eba:	3304      	adds	r3, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4a26      	ldr	r2, [pc, #152]	; (8004f5c <USB_EP0_OutStart+0xb8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d90a      	bls.n	8004ede <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed8:	d101      	bne.n	8004ede <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e037      	b.n	8004f4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ef8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f0c:	f043 0318 	orr.w	r3, r3, #24
 8004f10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004f24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004f26:	7afb      	ldrb	r3, [r7, #11]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d10f      	bne.n	8004f4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	461a      	mov	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004f4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	4f54300a 	.word	0x4f54300a

08004f60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <USB_CoreReset+0x64>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e01b      	b.n	8004fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	daf2      	bge.n	8004f6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f043 0201 	orr.w	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <USB_CoreReset+0x64>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d901      	bls.n	8004fa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e006      	b.n	8004fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d0f0      	beq.n	8004f96 <USB_CoreReset+0x36>

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	00030d40 	.word	0x00030d40

08004fc8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004fd4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004fd8:	f002 fc32 	bl	8007840 <USBD_static_malloc>
 8004fdc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d109      	bne.n	8004ff8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	32b0      	adds	r2, #176	; 0xb0
 8004fee:	2100      	movs	r1, #0
 8004ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e0d4      	b.n	80051a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004ff8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f002 fc9e 	bl	8007940 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	32b0      	adds	r2, #176	; 0xb0
 800500e:	68f9      	ldr	r1, [r7, #12]
 8005010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	32b0      	adds	r2, #176	; 0xb0
 800501e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	7c1b      	ldrb	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d138      	bne.n	80050a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005030:	4b5e      	ldr	r3, [pc, #376]	; (80051ac <USBD_CDC_Init+0x1e4>)
 8005032:	7819      	ldrb	r1, [r3, #0]
 8005034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005038:	2202      	movs	r2, #2
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f002 fadd 	bl	80075fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005040:	4b5a      	ldr	r3, [pc, #360]	; (80051ac <USBD_CDC_Init+0x1e4>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	f003 020f 	and.w	r2, r3, #15
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	3324      	adds	r3, #36	; 0x24
 8005056:	2201      	movs	r2, #1
 8005058:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800505a:	4b55      	ldr	r3, [pc, #340]	; (80051b0 <USBD_CDC_Init+0x1e8>)
 800505c:	7819      	ldrb	r1, [r3, #0]
 800505e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005062:	2202      	movs	r2, #2
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f002 fac8 	bl	80075fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800506a:	4b51      	ldr	r3, [pc, #324]	; (80051b0 <USBD_CDC_Init+0x1e8>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	f003 020f 	and.w	r2, r3, #15
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005082:	2201      	movs	r2, #1
 8005084:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005086:	4b4b      	ldr	r3, [pc, #300]	; (80051b4 <USBD_CDC_Init+0x1ec>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	f003 020f 	and.w	r2, r3, #15
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	3326      	adds	r3, #38	; 0x26
 800509c:	2210      	movs	r2, #16
 800509e:	801a      	strh	r2, [r3, #0]
 80050a0:	e035      	b.n	800510e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80050a2:	4b42      	ldr	r3, [pc, #264]	; (80051ac <USBD_CDC_Init+0x1e4>)
 80050a4:	7819      	ldrb	r1, [r3, #0]
 80050a6:	2340      	movs	r3, #64	; 0x40
 80050a8:	2202      	movs	r2, #2
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f002 faa5 	bl	80075fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80050b0:	4b3e      	ldr	r3, [pc, #248]	; (80051ac <USBD_CDC_Init+0x1e4>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	f003 020f 	and.w	r2, r3, #15
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	3324      	adds	r3, #36	; 0x24
 80050c6:	2201      	movs	r2, #1
 80050c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <USBD_CDC_Init+0x1e8>)
 80050cc:	7819      	ldrb	r1, [r3, #0]
 80050ce:	2340      	movs	r3, #64	; 0x40
 80050d0:	2202      	movs	r2, #2
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f002 fa91 	bl	80075fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80050d8:	4b35      	ldr	r3, [pc, #212]	; (80051b0 <USBD_CDC_Init+0x1e8>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	f003 020f 	and.w	r2, r3, #15
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050f0:	2201      	movs	r2, #1
 80050f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80050f4:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <USBD_CDC_Init+0x1ec>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	f003 020f 	and.w	r2, r3, #15
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	3326      	adds	r3, #38	; 0x26
 800510a:	2210      	movs	r2, #16
 800510c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800510e:	4b29      	ldr	r3, [pc, #164]	; (80051b4 <USBD_CDC_Init+0x1ec>)
 8005110:	7819      	ldrb	r1, [r3, #0]
 8005112:	2308      	movs	r3, #8
 8005114:	2203      	movs	r2, #3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f002 fa6f 	bl	80075fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <USBD_CDC_Init+0x1ec>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	f003 020f 	and.w	r2, r3, #15
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	3324      	adds	r3, #36	; 0x24
 8005132:	2201      	movs	r2, #1
 8005134:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	33b0      	adds	r3, #176	; 0xb0
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800516c:	2302      	movs	r3, #2
 800516e:	e018      	b.n	80051a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	7c1b      	ldrb	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005178:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <USBD_CDC_Init+0x1e8>)
 800517a:	7819      	ldrb	r1, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f002 fb26 	bl	80077d8 <USBD_LL_PrepareReceive>
 800518c:	e008      	b.n	80051a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800518e:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <USBD_CDC_Init+0x1e8>)
 8005190:	7819      	ldrb	r1, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f002 fb1c 	bl	80077d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000093 	.word	0x20000093
 80051b0:	20000094 	.word	0x20000094
 80051b4:	20000095 	.word	0x20000095

080051b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80051c4:	4b3a      	ldr	r3, [pc, #232]	; (80052b0 <USBD_CDC_DeInit+0xf8>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	4619      	mov	r1, r3
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f002 fa3b 	bl	8007646 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80051d0:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <USBD_CDC_DeInit+0xf8>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	3324      	adds	r3, #36	; 0x24
 80051e6:	2200      	movs	r2, #0
 80051e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80051ea:	4b32      	ldr	r3, [pc, #200]	; (80052b4 <USBD_CDC_DeInit+0xfc>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	4619      	mov	r1, r3
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f002 fa28 	bl	8007646 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80051f6:	4b2f      	ldr	r3, [pc, #188]	; (80052b4 <USBD_CDC_DeInit+0xfc>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	f003 020f 	and.w	r2, r3, #15
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800520e:	2200      	movs	r2, #0
 8005210:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005212:	4b29      	ldr	r3, [pc, #164]	; (80052b8 <USBD_CDC_DeInit+0x100>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f002 fa14 	bl	8007646 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800521e:	4b26      	ldr	r3, [pc, #152]	; (80052b8 <USBD_CDC_DeInit+0x100>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	f003 020f 	and.w	r2, r3, #15
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	3324      	adds	r3, #36	; 0x24
 8005234:	2200      	movs	r2, #0
 8005236:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005238:	4b1f      	ldr	r3, [pc, #124]	; (80052b8 <USBD_CDC_DeInit+0x100>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f003 020f 	and.w	r2, r3, #15
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	3326      	adds	r3, #38	; 0x26
 800524e:	2200      	movs	r2, #0
 8005250:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	32b0      	adds	r2, #176	; 0xb0
 800525c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01f      	beq.n	80052a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	33b0      	adds	r3, #176	; 0xb0
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	32b0      	adds	r2, #176	; 0xb0
 8005282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005286:	4618      	mov	r0, r3
 8005288:	f002 fae8 	bl	800785c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	32b0      	adds	r2, #176	; 0xb0
 8005296:	2100      	movs	r1, #0
 8005298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000093 	.word	0x20000093
 80052b4:	20000094 	.word	0x20000094
 80052b8:	20000095 	.word	0x20000095

080052bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	32b0      	adds	r2, #176	; 0xb0
 80052d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e0bf      	b.n	800546c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d050      	beq.n	800539a <USBD_CDC_Setup+0xde>
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	f040 80af 	bne.w	800545c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	88db      	ldrh	r3, [r3, #6]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d03a      	beq.n	800537c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	b25b      	sxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	da1b      	bge.n	8005348 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	33b0      	adds	r3, #176	; 0xb0
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005326:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	88d2      	ldrh	r2, [r2, #6]
 800532c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	88db      	ldrh	r3, [r3, #6]
 8005332:	2b07      	cmp	r3, #7
 8005334:	bf28      	it	cs
 8005336:	2307      	movcs	r3, #7
 8005338:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	89fa      	ldrh	r2, [r7, #14]
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f001 fd43 	bl	8006dcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005346:	e090      	b.n	800546a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	785a      	ldrb	r2, [r3, #1]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	88db      	ldrh	r3, [r3, #6]
 8005356:	2b3f      	cmp	r3, #63	; 0x3f
 8005358:	d803      	bhi.n	8005362 <USBD_CDC_Setup+0xa6>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	88db      	ldrh	r3, [r3, #6]
 800535e:	b2da      	uxtb	r2, r3
 8005360:	e000      	b.n	8005364 <USBD_CDC_Setup+0xa8>
 8005362:	2240      	movs	r2, #64	; 0x40
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800536a:	6939      	ldr	r1, [r7, #16]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005372:	461a      	mov	r2, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f001 fd55 	bl	8006e24 <USBD_CtlPrepareRx>
      break;
 800537a:	e076      	b.n	800546a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	33b0      	adds	r3, #176	; 0xb0
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	7850      	ldrb	r0, [r2, #1]
 8005392:	2200      	movs	r2, #0
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	4798      	blx	r3
      break;
 8005398:	e067      	b.n	800546a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	785b      	ldrb	r3, [r3, #1]
 800539e:	2b0b      	cmp	r3, #11
 80053a0:	d851      	bhi.n	8005446 <USBD_CDC_Setup+0x18a>
 80053a2:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <USBD_CDC_Setup+0xec>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053d9 	.word	0x080053d9
 80053ac:	08005455 	.word	0x08005455
 80053b0:	08005447 	.word	0x08005447
 80053b4:	08005447 	.word	0x08005447
 80053b8:	08005447 	.word	0x08005447
 80053bc:	08005447 	.word	0x08005447
 80053c0:	08005447 	.word	0x08005447
 80053c4:	08005447 	.word	0x08005447
 80053c8:	08005447 	.word	0x08005447
 80053cc:	08005447 	.word	0x08005447
 80053d0:	08005403 	.word	0x08005403
 80053d4:	0800542d 	.word	0x0800542d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d107      	bne.n	80053f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80053e4:	f107 030a 	add.w	r3, r7, #10
 80053e8:	2202      	movs	r2, #2
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 fced 	bl	8006dcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053f2:	e032      	b.n	800545a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f001 fc77 	bl	8006cea <USBD_CtlError>
            ret = USBD_FAIL;
 80053fc:	2303      	movs	r3, #3
 80053fe:	75fb      	strb	r3, [r7, #23]
          break;
 8005400:	e02b      	b.n	800545a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b03      	cmp	r3, #3
 800540c:	d107      	bne.n	800541e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800540e:	f107 030d 	add.w	r3, r7, #13
 8005412:	2201      	movs	r2, #1
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 fcd8 	bl	8006dcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800541c:	e01d      	b.n	800545a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f001 fc62 	bl	8006cea <USBD_CtlError>
            ret = USBD_FAIL;
 8005426:	2303      	movs	r3, #3
 8005428:	75fb      	strb	r3, [r7, #23]
          break;
 800542a:	e016      	b.n	800545a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b03      	cmp	r3, #3
 8005436:	d00f      	beq.n	8005458 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f001 fc55 	bl	8006cea <USBD_CtlError>
            ret = USBD_FAIL;
 8005440:	2303      	movs	r3, #3
 8005442:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005444:	e008      	b.n	8005458 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005446:	6839      	ldr	r1, [r7, #0]
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f001 fc4e 	bl	8006cea <USBD_CtlError>
          ret = USBD_FAIL;
 800544e:	2303      	movs	r3, #3
 8005450:	75fb      	strb	r3, [r7, #23]
          break;
 8005452:	e002      	b.n	800545a <USBD_CDC_Setup+0x19e>
          break;
 8005454:	bf00      	nop
 8005456:	e008      	b.n	800546a <USBD_CDC_Setup+0x1ae>
          break;
 8005458:	bf00      	nop
      }
      break;
 800545a:	e006      	b.n	800546a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f001 fc43 	bl	8006cea <USBD_CtlError>
      ret = USBD_FAIL;
 8005464:	2303      	movs	r3, #3
 8005466:	75fb      	strb	r3, [r7, #23]
      break;
 8005468:	bf00      	nop
  }

  return (uint8_t)ret;
 800546a:	7dfb      	ldrb	r3, [r7, #23]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005486:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	32b0      	adds	r2, #176	; 0xb0
 8005492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800549a:	2303      	movs	r3, #3
 800549c:	e065      	b.n	800556a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	32b0      	adds	r2, #176	; 0xb0
 80054a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80054ae:	78fb      	ldrb	r3, [r7, #3]
 80054b0:	f003 020f 	and.w	r2, r3, #15
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	3318      	adds	r3, #24
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d02f      	beq.n	8005528 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	f003 020f 	and.w	r2, r3, #15
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	3318      	adds	r3, #24
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	f003 010f 	and.w	r1, r3, #15
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	460b      	mov	r3, r1
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	440b      	add	r3, r1
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4403      	add	r3, r0
 80054f0:	3348      	adds	r3, #72	; 0x48
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d112      	bne.n	8005528 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	f003 020f 	and.w	r2, r3, #15
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	3318      	adds	r3, #24
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800551a:	78f9      	ldrb	r1, [r7, #3]
 800551c:	2300      	movs	r3, #0
 800551e:	2200      	movs	r2, #0
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f002 f938 	bl	8007796 <USBD_LL_Transmit>
 8005526:	e01f      	b.n	8005568 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	33b0      	adds	r3, #176	; 0xb0
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d010      	beq.n	8005568 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	33b0      	adds	r3, #176	; 0xb0
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005564:	78fa      	ldrb	r2, [r7, #3]
 8005566:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	32b0      	adds	r2, #176	; 0xb0
 8005588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	32b0      	adds	r2, #176	; 0xb0
 8005598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e01a      	b.n	80055da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	4619      	mov	r1, r3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f002 f936 	bl	800781a <USBD_LL_GetRxDataSize>
 80055ae:	4602      	mov	r2, r0
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	33b0      	adds	r3, #176	; 0xb0
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80055d4:	4611      	mov	r1, r2
 80055d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	32b0      	adds	r2, #176	; 0xb0
 80055f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005600:	2303      	movs	r3, #3
 8005602:	e025      	b.n	8005650 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	33b0      	adds	r3, #176	; 0xb0
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01a      	beq.n	800564e <USBD_CDC_EP0_RxReady+0x6c>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800561e:	2bff      	cmp	r3, #255	; 0xff
 8005620:	d015      	beq.n	800564e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	33b0      	adds	r3, #176	; 0xb0
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800563a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005642:	b292      	uxth	r2, r2
 8005644:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	22ff      	movs	r2, #255	; 0xff
 800564a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005660:	2182      	movs	r1, #130	; 0x82
 8005662:	4818      	ldr	r0, [pc, #96]	; (80056c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005664:	f000 fd09 	bl	800607a <USBD_GetEpDesc>
 8005668:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800566a:	2101      	movs	r1, #1
 800566c:	4815      	ldr	r0, [pc, #84]	; (80056c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800566e:	f000 fd04 	bl	800607a <USBD_GetEpDesc>
 8005672:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005674:	2181      	movs	r1, #129	; 0x81
 8005676:	4813      	ldr	r0, [pc, #76]	; (80056c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005678:	f000 fcff 	bl	800607a <USBD_GetEpDesc>
 800567c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2210      	movs	r2, #16
 8005688:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d006      	beq.n	800569e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2200      	movs	r2, #0
 8005694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005698:	711a      	strb	r2, [r3, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d006      	beq.n	80056b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ac:	711a      	strb	r2, [r3, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2243      	movs	r2, #67	; 0x43
 80056b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056b8:	4b02      	ldr	r3, [pc, #8]	; (80056c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000050 	.word	0x20000050

080056c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056d0:	2182      	movs	r1, #130	; 0x82
 80056d2:	4818      	ldr	r0, [pc, #96]	; (8005734 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056d4:	f000 fcd1 	bl	800607a <USBD_GetEpDesc>
 80056d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056da:	2101      	movs	r1, #1
 80056dc:	4815      	ldr	r0, [pc, #84]	; (8005734 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056de:	f000 fccc 	bl	800607a <USBD_GetEpDesc>
 80056e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056e4:	2181      	movs	r1, #129	; 0x81
 80056e6:	4813      	ldr	r0, [pc, #76]	; (8005734 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056e8:	f000 fcc7 	bl	800607a <USBD_GetEpDesc>
 80056ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2210      	movs	r2, #16
 80056f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d006      	beq.n	800570e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2200      	movs	r2, #0
 8005704:	711a      	strb	r2, [r3, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f042 0202 	orr.w	r2, r2, #2
 800570c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d006      	beq.n	8005722 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	711a      	strb	r2, [r3, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f042 0202 	orr.w	r2, r2, #2
 8005720:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2243      	movs	r2, #67	; 0x43
 8005726:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005728:	4b02      	ldr	r3, [pc, #8]	; (8005734 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000050 	.word	0x20000050

08005738 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005740:	2182      	movs	r1, #130	; 0x82
 8005742:	4818      	ldr	r0, [pc, #96]	; (80057a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005744:	f000 fc99 	bl	800607a <USBD_GetEpDesc>
 8005748:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800574a:	2101      	movs	r1, #1
 800574c:	4815      	ldr	r0, [pc, #84]	; (80057a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800574e:	f000 fc94 	bl	800607a <USBD_GetEpDesc>
 8005752:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005754:	2181      	movs	r1, #129	; 0x81
 8005756:	4813      	ldr	r0, [pc, #76]	; (80057a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005758:	f000 fc8f 	bl	800607a <USBD_GetEpDesc>
 800575c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2210      	movs	r2, #16
 8005768:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d006      	beq.n	800577e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2200      	movs	r2, #0
 8005774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005778:	711a      	strb	r2, [r3, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d006      	beq.n	8005792 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800578c:	711a      	strb	r2, [r3, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2243      	movs	r2, #67	; 0x43
 8005796:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005798:	4b02      	ldr	r3, [pc, #8]	; (80057a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000050 	.word	0x20000050

080057a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	220a      	movs	r2, #10
 80057b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80057b6:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	2000000c 	.word	0x2000000c

080057c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80057d8:	2303      	movs	r3, #3
 80057da:	e009      	b.n	80057f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	33b0      	adds	r3, #176	; 0xb0
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	32b0      	adds	r2, #176	; 0xb0
 8005812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005816:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800581e:	2303      	movs	r3, #3
 8005820:	e008      	b.n	8005834 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	32b0      	adds	r2, #176	; 0xb0
 8005854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005858:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005860:	2303      	movs	r3, #3
 8005862:	e004      	b.n	800586e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32b0      	adds	r2, #176	; 0xb0
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	32b0      	adds	r2, #176	; 0xb0
 800589e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e018      	b.n	80058dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	7c1b      	ldrb	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058b2:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <USBD_CDC_ReceivePacket+0x68>)
 80058b4:	7819      	ldrb	r1, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 ff89 	bl	80077d8 <USBD_LL_PrepareReceive>
 80058c6:	e008      	b.n	80058da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058c8:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <USBD_CDC_ReceivePacket+0x68>)
 80058ca:	7819      	ldrb	r1, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058d2:	2340      	movs	r3, #64	; 0x40
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f001 ff7f 	bl	80077d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000094 	.word	0x20000094

080058e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e01f      	b.n	8005940 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	79fa      	ldrb	r2, [r7, #7]
 8005932:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f001 fdf9 	bl	800752c <USBD_LL_Init>
 800593a:	4603      	mov	r3, r0
 800593c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800593e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800595c:	2303      	movs	r3, #3
 800595e:	e025      	b.n	80059ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	32ae      	adds	r2, #174	; 0xae
 8005972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00f      	beq.n	800599c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	32ae      	adds	r2, #174	; 0xae
 8005986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	f107 020e 	add.w	r2, r7, #14
 8005990:	4610      	mov	r0, r2
 8005992:	4798      	blx	r3
 8005994:	4602      	mov	r2, r0
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 fe01 	bl	80075c4 <USBD_LL_Start>
 80059c2:	4603      	mov	r3, r0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	460b      	mov	r3, r1
 80059ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d009      	beq.n	8005a10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	4611      	mov	r1, r2
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	4798      	blx	r3
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	460b      	mov	r3, r1
 8005a24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	78fa      	ldrb	r2, [r7, #3]
 8005a34:	4611      	mov	r1, r2
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005a40:	2303      	movs	r3, #3
 8005a42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 f908 	bl	8006c76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005a74:	461a      	mov	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d01a      	beq.n	8005ac0 <USBD_LL_SetupStage+0x72>
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d822      	bhi.n	8005ad4 <USBD_LL_SetupStage+0x86>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <USBD_LL_SetupStage+0x4a>
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d00a      	beq.n	8005aac <USBD_LL_SetupStage+0x5e>
 8005a96:	e01d      	b.n	8005ad4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fb5f 	bl	8006164 <USBD_StdDevReq>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8005aaa:	e020      	b.n	8005aee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fbc7 	bl	8006248 <USBD_StdItfReq>
 8005aba:	4603      	mov	r3, r0
 8005abc:	73fb      	strb	r3, [r7, #15]
      break;
 8005abe:	e016      	b.n	8005aee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fc29 	bl	8006320 <USBD_StdEPReq>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad2:	e00c      	b.n	8005aee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ada:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f001 fdce 	bl	8007684 <USBD_LL_StallEP>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73fb      	strb	r3, [r7, #15]
      break;
 8005aec:	bf00      	nop
  }

  return ret;
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	460b      	mov	r3, r1
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005b0a:	7afb      	ldrb	r3, [r7, #11]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d16e      	bne.n	8005bee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	f040 8098 	bne.w	8005c54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d913      	bls.n	8005b58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	1ad2      	subs	r2, r2, r3
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	4293      	cmp	r3, r2
 8005b48:	bf28      	it	cs
 8005b4a:	4613      	movcs	r3, r2
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f001 f984 	bl	8006e5e <USBD_CtlContinueRx>
 8005b56:	e07d      	b.n	8005c54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d014      	beq.n	8005b90 <USBD_LL_DataOutStage+0x98>
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d81d      	bhi.n	8005ba6 <USBD_LL_DataOutStage+0xae>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <USBD_LL_DataOutStage+0x7c>
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d003      	beq.n	8005b7a <USBD_LL_DataOutStage+0x82>
 8005b72:	e018      	b.n	8005ba6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	75bb      	strb	r3, [r7, #22]
            break;
 8005b78:	e018      	b.n	8005bac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	4619      	mov	r1, r3
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fa5e 	bl	8006046 <USBD_CoreFindIF>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	75bb      	strb	r3, [r7, #22]
            break;
 8005b8e:	e00d      	b.n	8005bac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	4619      	mov	r1, r3
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 fa60 	bl	8006060 <USBD_CoreFindEP>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	75bb      	strb	r3, [r7, #22]
            break;
 8005ba4:	e002      	b.n	8005bac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75bb      	strb	r3, [r7, #22]
            break;
 8005baa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005bac:	7dbb      	ldrb	r3, [r7, #22]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d119      	bne.n	8005be6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d113      	bne.n	8005be6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005bbe:	7dba      	ldrb	r2, [r7, #22]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	32ae      	adds	r2, #174	; 0xae
 8005bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005bce:	7dba      	ldrb	r2, [r7, #22]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005bd6:	7dba      	ldrb	r2, [r7, #22]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	32ae      	adds	r2, #174	; 0xae
 8005bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f001 f94a 	bl	8006e80 <USBD_CtlSendStatus>
 8005bec:	e032      	b.n	8005c54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005bee:	7afb      	ldrb	r3, [r7, #11]
 8005bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fa31 	bl	8006060 <USBD_CoreFindEP>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c02:	7dbb      	ldrb	r3, [r7, #22]
 8005c04:	2bff      	cmp	r3, #255	; 0xff
 8005c06:	d025      	beq.n	8005c54 <USBD_LL_DataOutStage+0x15c>
 8005c08:	7dbb      	ldrb	r3, [r7, #22]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d122      	bne.n	8005c54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d117      	bne.n	8005c4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005c1a:	7dba      	ldrb	r2, [r7, #22]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	32ae      	adds	r2, #174	; 0xae
 8005c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00f      	beq.n	8005c4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005c2a:	7dba      	ldrb	r2, [r7, #22]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005c32:	7dba      	ldrb	r2, [r7, #22]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	32ae      	adds	r2, #174	; 0xae
 8005c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	7afa      	ldrb	r2, [r7, #11]
 8005c40:	4611      	mov	r1, r2
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	4798      	blx	r3
 8005c46:	4603      	mov	r3, r0
 8005c48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
 8005c52:	e000      	b.n	8005c56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b086      	sub	sp, #24
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	460b      	mov	r3, r1
 8005c68:	607a      	str	r2, [r7, #4]
 8005c6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005c6c:	7afb      	ldrb	r3, [r7, #11]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d16f      	bne.n	8005d52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3314      	adds	r3, #20
 8005c76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d15a      	bne.n	8005d38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d914      	bls.n	8005cb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	1ad2      	subs	r2, r2, r3
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f001 f8ac 	bl	8006e02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005caa:	2300      	movs	r3, #0
 8005cac:	2200      	movs	r2, #0
 8005cae:	2100      	movs	r1, #0
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f001 fd91 	bl	80077d8 <USBD_LL_PrepareReceive>
 8005cb6:	e03f      	b.n	8005d38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d11c      	bne.n	8005cfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d316      	bcc.n	8005cfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d20f      	bcs.n	8005cfe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f001 f88d 	bl	8006e02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f001 fd6e 	bl	80077d8 <USBD_LL_PrepareReceive>
 8005cfc:	e01c      	b.n	8005d38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d10f      	bne.n	8005d2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d2a:	2180      	movs	r1, #128	; 0x80
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f001 fca9 	bl	8007684 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f001 f8b7 	bl	8006ea6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d03a      	beq.n	8005db8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff fe42 	bl	80059cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d50:	e032      	b.n	8005db8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005d52:	7afb      	ldrb	r3, [r7, #11]
 8005d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 f97f 	bl	8006060 <USBD_CoreFindEP>
 8005d62:	4603      	mov	r3, r0
 8005d64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	2bff      	cmp	r3, #255	; 0xff
 8005d6a:	d025      	beq.n	8005db8 <USBD_LL_DataInStage+0x15a>
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d122      	bne.n	8005db8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d11c      	bne.n	8005db8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005d7e:	7dfa      	ldrb	r2, [r7, #23]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	32ae      	adds	r2, #174	; 0xae
 8005d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d014      	beq.n	8005db8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005d8e:	7dfa      	ldrb	r2, [r7, #23]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005d96:	7dfa      	ldrb	r2, [r7, #23]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	32ae      	adds	r2, #174	; 0xae
 8005d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	7afa      	ldrb	r2, [r7, #11]
 8005da4:	4611      	mov	r1, r2
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	4798      	blx	r3
 8005daa:	4603      	mov	r3, r0
 8005dac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005dae:	7dbb      	ldrb	r3, [r7, #22]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005db4:	7dbb      	ldrb	r3, [r7, #22]
 8005db6:	e000      	b.n	8005dba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d014      	beq.n	8005e28 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00e      	beq.n	8005e28 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6852      	ldr	r2, [r2, #4]
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	4611      	mov	r1, r2
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	4798      	blx	r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005e24:	2303      	movs	r3, #3
 8005e26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e28:	2340      	movs	r3, #64	; 0x40
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 fbe3 	bl	80075fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2240      	movs	r2, #64	; 0x40
 8005e40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e44:	2340      	movs	r3, #64	; 0x40
 8005e46:	2200      	movs	r2, #0
 8005e48:	2180      	movs	r1, #128	; 0x80
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 fbd5 	bl	80075fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2240      	movs	r2, #64	; 0x40
 8005e5a:	621a      	str	r2, [r3, #32]

  return ret;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	78fa      	ldrb	r2, [r7, #3]
 8005e76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d106      	bne.n	8005ed4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d110      	bne.n	8005f18 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00b      	beq.n	8005f18 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	32ae      	adds	r2, #174	; 0xae
 8005f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e01c      	b.n	8005f7e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d115      	bne.n	8005f7c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	32ae      	adds	r2, #174	; 0xae
 8005f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00b      	beq.n	8005f7c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	32ae      	adds	r2, #174	; 0xae
 8005f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	78fa      	ldrb	r2, [r7, #3]
 8005f76:	4611      	mov	r1, r2
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	32ae      	adds	r2, #174	; 0xae
 8005f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e01c      	b.n	8005fe2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d115      	bne.n	8005fe0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	32ae      	adds	r2, #174	; 0xae
 8005fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00b      	beq.n	8005fe0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	32ae      	adds	r2, #174	; 0xae
 8005fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	78fa      	ldrb	r2, [r7, #3]
 8005fda:	4611      	mov	r1, r2
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00e      	beq.n	800603c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6852      	ldr	r2, [r2, #4]
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	4611      	mov	r1, r2
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	4798      	blx	r3
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006038:	2303      	movs	r3, #3
 800603a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800603c:	7bfb      	ldrb	r3, [r7, #15]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006052:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006054:	4618      	mov	r0, r3
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800606c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800606e:	4618      	mov	r0, r3
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	460b      	mov	r3, r1
 8006084:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800608e:	2300      	movs	r3, #0
 8006090:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	885b      	ldrh	r3, [r3, #2]
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	429a      	cmp	r2, r3
 80060a0:	d920      	bls.n	80060e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80060aa:	e013      	b.n	80060d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80060ac:	f107 030a 	add.w	r3, r7, #10
 80060b0:	4619      	mov	r1, r3
 80060b2:	6978      	ldr	r0, [r7, #20]
 80060b4:	f000 f81b 	bl	80060ee <USBD_GetNextDesc>
 80060b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	785b      	ldrb	r3, [r3, #1]
 80060be:	2b05      	cmp	r3, #5
 80060c0:	d108      	bne.n	80060d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	789b      	ldrb	r3, [r3, #2]
 80060ca:	78fa      	ldrb	r2, [r7, #3]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d008      	beq.n	80060e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	885b      	ldrh	r3, [r3, #2]
 80060d8:	b29a      	uxth	r2, r3
 80060da:	897b      	ldrh	r3, [r7, #10]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d8e5      	bhi.n	80060ac <USBD_GetEpDesc+0x32>
 80060e0:	e000      	b.n	80060e4 <USBD_GetEpDesc+0x6a>
          break;
 80060e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80060e4:	693b      	ldr	r3, [r7, #16]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	881a      	ldrh	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	4413      	add	r3, r2
 8006108:	b29a      	uxth	r2, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4413      	add	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	3301      	adds	r3, #1
 800613e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006146:	8a3b      	ldrh	r3, [r7, #16]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	b21a      	sxth	r2, r3
 800614c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006150:	4313      	orrs	r3, r2
 8006152:	b21b      	sxth	r3, r3
 8006154:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006156:	89fb      	ldrh	r3, [r7, #14]
}
 8006158:	4618      	mov	r0, r3
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800617a:	2b40      	cmp	r3, #64	; 0x40
 800617c:	d005      	beq.n	800618a <USBD_StdDevReq+0x26>
 800617e:	2b40      	cmp	r3, #64	; 0x40
 8006180:	d857      	bhi.n	8006232 <USBD_StdDevReq+0xce>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00f      	beq.n	80061a6 <USBD_StdDevReq+0x42>
 8006186:	2b20      	cmp	r3, #32
 8006188:	d153      	bne.n	8006232 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	32ae      	adds	r2, #174	; 0xae
 8006194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]
      break;
 80061a4:	e04a      	b.n	800623c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	2b09      	cmp	r3, #9
 80061ac:	d83b      	bhi.n	8006226 <USBD_StdDevReq+0xc2>
 80061ae:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <USBD_StdDevReq+0x50>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	08006209 	.word	0x08006209
 80061b8:	0800621d 	.word	0x0800621d
 80061bc:	08006227 	.word	0x08006227
 80061c0:	08006213 	.word	0x08006213
 80061c4:	08006227 	.word	0x08006227
 80061c8:	080061e7 	.word	0x080061e7
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	08006227 	.word	0x08006227
 80061d4:	080061ff 	.word	0x080061ff
 80061d8:	080061f1 	.word	0x080061f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fa3c 	bl	800665c <USBD_GetDescriptor>
          break;
 80061e4:	e024      	b.n	8006230 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fba1 	bl	8006930 <USBD_SetAddress>
          break;
 80061ee:	e01f      	b.n	8006230 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fbe0 	bl	80069b8 <USBD_SetConfig>
 80061f8:	4603      	mov	r3, r0
 80061fa:	73fb      	strb	r3, [r7, #15]
          break;
 80061fc:	e018      	b.n	8006230 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fc83 	bl	8006b0c <USBD_GetConfig>
          break;
 8006206:	e013      	b.n	8006230 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fcb4 	bl	8006b78 <USBD_GetStatus>
          break;
 8006210:	e00e      	b.n	8006230 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fce3 	bl	8006be0 <USBD_SetFeature>
          break;
 800621a:	e009      	b.n	8006230 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fd07 	bl	8006c32 <USBD_ClrFeature>
          break;
 8006224:	e004      	b.n	8006230 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fd5e 	bl	8006cea <USBD_CtlError>
          break;
 800622e:	bf00      	nop
      }
      break;
 8006230:	e004      	b.n	800623c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fd58 	bl	8006cea <USBD_CtlError>
      break;
 800623a:	bf00      	nop
  }

  return ret;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop

08006248 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800625e:	2b40      	cmp	r3, #64	; 0x40
 8006260:	d005      	beq.n	800626e <USBD_StdItfReq+0x26>
 8006262:	2b40      	cmp	r3, #64	; 0x40
 8006264:	d852      	bhi.n	800630c <USBD_StdItfReq+0xc4>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <USBD_StdItfReq+0x26>
 800626a:	2b20      	cmp	r3, #32
 800626c:	d14e      	bne.n	800630c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006274:	b2db      	uxtb	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	2b02      	cmp	r3, #2
 800627a:	d840      	bhi.n	80062fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	889b      	ldrh	r3, [r3, #4]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d836      	bhi.n	80062f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	889b      	ldrh	r3, [r3, #4]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff fed9 	bl	8006046 <USBD_CoreFindIF>
 8006294:	4603      	mov	r3, r0
 8006296:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006298:	7bbb      	ldrb	r3, [r7, #14]
 800629a:	2bff      	cmp	r3, #255	; 0xff
 800629c:	d01d      	beq.n	80062da <USBD_StdItfReq+0x92>
 800629e:	7bbb      	ldrb	r3, [r7, #14]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d11a      	bne.n	80062da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80062a4:	7bba      	ldrb	r2, [r7, #14]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	32ae      	adds	r2, #174	; 0xae
 80062aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00f      	beq.n	80062d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80062b4:	7bba      	ldrb	r2, [r7, #14]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80062bc:	7bba      	ldrb	r2, [r7, #14]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	32ae      	adds	r2, #174	; 0xae
 80062c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
 80062ce:	4603      	mov	r3, r0
 80062d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80062d2:	e004      	b.n	80062de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80062d4:	2303      	movs	r3, #3
 80062d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80062d8:	e001      	b.n	80062de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80062da:	2303      	movs	r3, #3
 80062dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	88db      	ldrh	r3, [r3, #6]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d110      	bne.n	8006308 <USBD_StdItfReq+0xc0>
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10d      	bne.n	8006308 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fdc7 	bl	8006e80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80062f2:	e009      	b.n	8006308 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fcf7 	bl	8006cea <USBD_CtlError>
          break;
 80062fc:	e004      	b.n	8006308 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fcf2 	bl	8006cea <USBD_CtlError>
          break;
 8006306:	e000      	b.n	800630a <USBD_StdItfReq+0xc2>
          break;
 8006308:	bf00      	nop
      }
      break;
 800630a:	e004      	b.n	8006316 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fceb 	bl	8006cea <USBD_CtlError>
      break;
 8006314:	bf00      	nop
  }

  return ret;
 8006316:	7bfb      	ldrb	r3, [r7, #15]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	889b      	ldrh	r3, [r3, #4]
 8006332:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800633c:	2b40      	cmp	r3, #64	; 0x40
 800633e:	d007      	beq.n	8006350 <USBD_StdEPReq+0x30>
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	f200 817f 	bhi.w	8006644 <USBD_StdEPReq+0x324>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d02a      	beq.n	80063a0 <USBD_StdEPReq+0x80>
 800634a:	2b20      	cmp	r3, #32
 800634c:	f040 817a 	bne.w	8006644 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006350:	7bbb      	ldrb	r3, [r7, #14]
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff fe83 	bl	8006060 <USBD_CoreFindEP>
 800635a:	4603      	mov	r3, r0
 800635c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800635e:	7b7b      	ldrb	r3, [r7, #13]
 8006360:	2bff      	cmp	r3, #255	; 0xff
 8006362:	f000 8174 	beq.w	800664e <USBD_StdEPReq+0x32e>
 8006366:	7b7b      	ldrb	r3, [r7, #13]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f040 8170 	bne.w	800664e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800636e:	7b7a      	ldrb	r2, [r7, #13]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006376:	7b7a      	ldrb	r2, [r7, #13]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	32ae      	adds	r2, #174	; 0xae
 800637c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 8163 	beq.w	800664e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006388:	7b7a      	ldrb	r2, [r7, #13]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	32ae      	adds	r2, #174	; 0xae
 800638e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	4798      	blx	r3
 800639a:	4603      	mov	r3, r0
 800639c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800639e:	e156      	b.n	800664e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d008      	beq.n	80063ba <USBD_StdEPReq+0x9a>
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	f300 8145 	bgt.w	8006638 <USBD_StdEPReq+0x318>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 809b 	beq.w	80064ea <USBD_StdEPReq+0x1ca>
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d03c      	beq.n	8006432 <USBD_StdEPReq+0x112>
 80063b8:	e13e      	b.n	8006638 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d002      	beq.n	80063cc <USBD_StdEPReq+0xac>
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d016      	beq.n	80063f8 <USBD_StdEPReq+0xd8>
 80063ca:	e02c      	b.n	8006426 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063cc:	7bbb      	ldrb	r3, [r7, #14]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00d      	beq.n	80063ee <USBD_StdEPReq+0xce>
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	2b80      	cmp	r3, #128	; 0x80
 80063d6:	d00a      	beq.n	80063ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 f951 	bl	8007684 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063e2:	2180      	movs	r1, #128	; 0x80
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f001 f94d 	bl	8007684 <USBD_LL_StallEP>
 80063ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063ec:	e020      	b.n	8006430 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fc7a 	bl	8006cea <USBD_CtlError>
              break;
 80063f6:	e01b      	b.n	8006430 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	885b      	ldrh	r3, [r3, #2]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10e      	bne.n	800641e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00b      	beq.n	800641e <USBD_StdEPReq+0xfe>
 8006406:	7bbb      	ldrb	r3, [r7, #14]
 8006408:	2b80      	cmp	r3, #128	; 0x80
 800640a:	d008      	beq.n	800641e <USBD_StdEPReq+0xfe>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	88db      	ldrh	r3, [r3, #6]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006414:	7bbb      	ldrb	r3, [r7, #14]
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 f933 	bl	8007684 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fd2e 	bl	8006e80 <USBD_CtlSendStatus>

              break;
 8006424:	e004      	b.n	8006430 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fc5e 	bl	8006cea <USBD_CtlError>
              break;
 800642e:	bf00      	nop
          }
          break;
 8006430:	e107      	b.n	8006642 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d002      	beq.n	8006444 <USBD_StdEPReq+0x124>
 800643e:	2b03      	cmp	r3, #3
 8006440:	d016      	beq.n	8006470 <USBD_StdEPReq+0x150>
 8006442:	e04b      	b.n	80064dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00d      	beq.n	8006466 <USBD_StdEPReq+0x146>
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	2b80      	cmp	r3, #128	; 0x80
 800644e:	d00a      	beq.n	8006466 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 f915 	bl	8007684 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800645a:	2180      	movs	r1, #128	; 0x80
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 f911 	bl	8007684 <USBD_LL_StallEP>
 8006462:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006464:	e040      	b.n	80064e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fc3e 	bl	8006cea <USBD_CtlError>
              break;
 800646e:	e03b      	b.n	80064e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	885b      	ldrh	r3, [r3, #2]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d136      	bne.n	80064e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647e:	2b00      	cmp	r3, #0
 8006480:	d004      	beq.n	800648c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 f91b 	bl	80076c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fcf7 	bl	8006e80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff fde2 	bl	8006060 <USBD_CoreFindEP>
 800649c:	4603      	mov	r3, r0
 800649e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064a0:	7b7b      	ldrb	r3, [r7, #13]
 80064a2:	2bff      	cmp	r3, #255	; 0xff
 80064a4:	d01f      	beq.n	80064e6 <USBD_StdEPReq+0x1c6>
 80064a6:	7b7b      	ldrb	r3, [r7, #13]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d11c      	bne.n	80064e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80064ac:	7b7a      	ldrb	r2, [r7, #13]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80064b4:	7b7a      	ldrb	r2, [r7, #13]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	32ae      	adds	r2, #174	; 0xae
 80064ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d010      	beq.n	80064e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80064c4:	7b7a      	ldrb	r2, [r7, #13]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	32ae      	adds	r2, #174	; 0xae
 80064ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80064da:	e004      	b.n	80064e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fc03 	bl	8006cea <USBD_CtlError>
              break;
 80064e4:	e000      	b.n	80064e8 <USBD_StdEPReq+0x1c8>
              break;
 80064e6:	bf00      	nop
          }
          break;
 80064e8:	e0ab      	b.n	8006642 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d002      	beq.n	80064fc <USBD_StdEPReq+0x1dc>
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d032      	beq.n	8006560 <USBD_StdEPReq+0x240>
 80064fa:	e097      	b.n	800662c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d007      	beq.n	8006512 <USBD_StdEPReq+0x1f2>
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	2b80      	cmp	r3, #128	; 0x80
 8006506:	d004      	beq.n	8006512 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fbed 	bl	8006cea <USBD_CtlError>
                break;
 8006510:	e091      	b.n	8006636 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006516:	2b00      	cmp	r3, #0
 8006518:	da0b      	bge.n	8006532 <USBD_StdEPReq+0x212>
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	3310      	adds	r3, #16
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	4413      	add	r3, r2
 800652e:	3304      	adds	r3, #4
 8006530:	e00b      	b.n	800654a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006538:	4613      	mov	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	4413      	add	r3, r2
 8006548:	3304      	adds	r3, #4
 800654a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2202      	movs	r2, #2
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fc37 	bl	8006dcc <USBD_CtlSendData>
              break;
 800655e:	e06a      	b.n	8006636 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006564:	2b00      	cmp	r3, #0
 8006566:	da11      	bge.n	800658c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	f003 020f 	and.w	r2, r3, #15
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	3324      	adds	r3, #36	; 0x24
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d117      	bne.n	80065b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fbb0 	bl	8006cea <USBD_CtlError>
                  break;
 800658a:	e054      	b.n	8006636 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800658c:	7bbb      	ldrb	r3, [r7, #14]
 800658e:	f003 020f 	and.w	r2, r3, #15
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fb9d 	bl	8006cea <USBD_CtlError>
                  break;
 80065b0:	e041      	b.n	8006636 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	da0b      	bge.n	80065d2 <USBD_StdEPReq+0x2b2>
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	3310      	adds	r3, #16
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	4413      	add	r3, r2
 80065ce:	3304      	adds	r3, #4
 80065d0:	e00b      	b.n	80065ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
 80065d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4413      	add	r3, r2
 80065e8:	3304      	adds	r3, #4
 80065ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065ec:	7bbb      	ldrb	r3, [r7, #14]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <USBD_StdEPReq+0x2d8>
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	2b80      	cmp	r3, #128	; 0x80
 80065f6:	d103      	bne.n	8006600 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e00e      	b.n	800661e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 f87b 	bl	8007700 <USBD_LL_IsStallEP>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2201      	movs	r2, #1
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	e002      	b.n	800661e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2202      	movs	r2, #2
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fbd1 	bl	8006dcc <USBD_CtlSendData>
              break;
 800662a:	e004      	b.n	8006636 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fb5b 	bl	8006cea <USBD_CtlError>
              break;
 8006634:	bf00      	nop
          }
          break;
 8006636:	e004      	b.n	8006642 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fb55 	bl	8006cea <USBD_CtlError>
          break;
 8006640:	bf00      	nop
      }
      break;
 8006642:	e005      	b.n	8006650 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fb4f 	bl	8006cea <USBD_CtlError>
      break;
 800664c:	e000      	b.n	8006650 <USBD_StdEPReq+0x330>
      break;
 800664e:	bf00      	nop
  }

  return ret;
 8006650:	7bfb      	ldrb	r3, [r7, #15]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	885b      	ldrh	r3, [r3, #2]
 8006676:	0a1b      	lsrs	r3, r3, #8
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b01      	subs	r3, #1
 800667c:	2b06      	cmp	r3, #6
 800667e:	f200 8128 	bhi.w	80068d2 <USBD_GetDescriptor+0x276>
 8006682:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <USBD_GetDescriptor+0x2c>)
 8006684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006688:	080066a5 	.word	0x080066a5
 800668c:	080066bd 	.word	0x080066bd
 8006690:	080066fd 	.word	0x080066fd
 8006694:	080068d3 	.word	0x080068d3
 8006698:	080068d3 	.word	0x080068d3
 800669c:	08006873 	.word	0x08006873
 80066a0:	0800689f 	.word	0x0800689f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	7c12      	ldrb	r2, [r2, #16]
 80066b0:	f107 0108 	add.w	r1, r7, #8
 80066b4:	4610      	mov	r0, r2
 80066b6:	4798      	blx	r3
 80066b8:	60f8      	str	r0, [r7, #12]
      break;
 80066ba:	e112      	b.n	80068e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7c1b      	ldrb	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10d      	bne.n	80066e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066cc:	f107 0208 	add.w	r2, r7, #8
 80066d0:	4610      	mov	r0, r2
 80066d2:	4798      	blx	r3
 80066d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3301      	adds	r3, #1
 80066da:	2202      	movs	r2, #2
 80066dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80066de:	e100      	b.n	80068e2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	f107 0208 	add.w	r2, r7, #8
 80066ec:	4610      	mov	r0, r2
 80066ee:	4798      	blx	r3
 80066f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3301      	adds	r3, #1
 80066f6:	2202      	movs	r2, #2
 80066f8:	701a      	strb	r2, [r3, #0]
      break;
 80066fa:	e0f2      	b.n	80068e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	885b      	ldrh	r3, [r3, #2]
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b05      	cmp	r3, #5
 8006704:	f200 80ac 	bhi.w	8006860 <USBD_GetDescriptor+0x204>
 8006708:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <USBD_GetDescriptor+0xb4>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	08006729 	.word	0x08006729
 8006714:	0800675d 	.word	0x0800675d
 8006718:	08006791 	.word	0x08006791
 800671c:	080067c5 	.word	0x080067c5
 8006720:	080067f9 	.word	0x080067f9
 8006724:	0800682d 	.word	0x0800682d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00b      	beq.n	800674c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	7c12      	ldrb	r2, [r2, #16]
 8006740:	f107 0108 	add.w	r1, r7, #8
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
 8006748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800674a:	e091      	b.n	8006870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 facb 	bl	8006cea <USBD_CtlError>
            err++;
 8006754:	7afb      	ldrb	r3, [r7, #11]
 8006756:	3301      	adds	r3, #1
 8006758:	72fb      	strb	r3, [r7, #11]
          break;
 800675a:	e089      	b.n	8006870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	7c12      	ldrb	r2, [r2, #16]
 8006774:	f107 0108 	add.w	r1, r7, #8
 8006778:	4610      	mov	r0, r2
 800677a:	4798      	blx	r3
 800677c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800677e:	e077      	b.n	8006870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fab1 	bl	8006cea <USBD_CtlError>
            err++;
 8006788:	7afb      	ldrb	r3, [r7, #11]
 800678a:	3301      	adds	r3, #1
 800678c:	72fb      	strb	r3, [r7, #11]
          break;
 800678e:	e06f      	b.n	8006870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00b      	beq.n	80067b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	7c12      	ldrb	r2, [r2, #16]
 80067a8:	f107 0108 	add.w	r1, r7, #8
 80067ac:	4610      	mov	r0, r2
 80067ae:	4798      	blx	r3
 80067b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067b2:	e05d      	b.n	8006870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa97 	bl	8006cea <USBD_CtlError>
            err++;
 80067bc:	7afb      	ldrb	r3, [r7, #11]
 80067be:	3301      	adds	r3, #1
 80067c0:	72fb      	strb	r3, [r7, #11]
          break;
 80067c2:	e055      	b.n	8006870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	7c12      	ldrb	r2, [r2, #16]
 80067dc:	f107 0108 	add.w	r1, r7, #8
 80067e0:	4610      	mov	r0, r2
 80067e2:	4798      	blx	r3
 80067e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067e6:	e043      	b.n	8006870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fa7d 	bl	8006cea <USBD_CtlError>
            err++;
 80067f0:	7afb      	ldrb	r3, [r7, #11]
 80067f2:	3301      	adds	r3, #1
 80067f4:	72fb      	strb	r3, [r7, #11]
          break;
 80067f6:	e03b      	b.n	8006870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	7c12      	ldrb	r2, [r2, #16]
 8006810:	f107 0108 	add.w	r1, r7, #8
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
 8006818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800681a:	e029      	b.n	8006870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa63 	bl	8006cea <USBD_CtlError>
            err++;
 8006824:	7afb      	ldrb	r3, [r7, #11]
 8006826:	3301      	adds	r3, #1
 8006828:	72fb      	strb	r3, [r7, #11]
          break;
 800682a:	e021      	b.n	8006870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	7c12      	ldrb	r2, [r2, #16]
 8006844:	f107 0108 	add.w	r1, r7, #8
 8006848:	4610      	mov	r0, r2
 800684a:	4798      	blx	r3
 800684c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800684e:	e00f      	b.n	8006870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fa49 	bl	8006cea <USBD_CtlError>
            err++;
 8006858:	7afb      	ldrb	r3, [r7, #11]
 800685a:	3301      	adds	r3, #1
 800685c:	72fb      	strb	r3, [r7, #11]
          break;
 800685e:	e007      	b.n	8006870 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa41 	bl	8006cea <USBD_CtlError>
          err++;
 8006868:	7afb      	ldrb	r3, [r7, #11]
 800686a:	3301      	adds	r3, #1
 800686c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800686e:	bf00      	nop
      }
      break;
 8006870:	e037      	b.n	80068e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	7c1b      	ldrb	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006882:	f107 0208 	add.w	r2, r7, #8
 8006886:	4610      	mov	r0, r2
 8006888:	4798      	blx	r3
 800688a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800688c:	e029      	b.n	80068e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fa2a 	bl	8006cea <USBD_CtlError>
        err++;
 8006896:	7afb      	ldrb	r3, [r7, #11]
 8006898:	3301      	adds	r3, #1
 800689a:	72fb      	strb	r3, [r7, #11]
      break;
 800689c:	e021      	b.n	80068e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	7c1b      	ldrb	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10d      	bne.n	80068c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ae:	f107 0208 	add.w	r2, r7, #8
 80068b2:	4610      	mov	r0, r2
 80068b4:	4798      	blx	r3
 80068b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3301      	adds	r3, #1
 80068bc:	2207      	movs	r2, #7
 80068be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068c0:	e00f      	b.n	80068e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fa10 	bl	8006cea <USBD_CtlError>
        err++;
 80068ca:	7afb      	ldrb	r3, [r7, #11]
 80068cc:	3301      	adds	r3, #1
 80068ce:	72fb      	strb	r3, [r7, #11]
      break;
 80068d0:	e007      	b.n	80068e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fa08 	bl	8006cea <USBD_CtlError>
      err++;
 80068da:	7afb      	ldrb	r3, [r7, #11]
 80068dc:	3301      	adds	r3, #1
 80068de:	72fb      	strb	r3, [r7, #11]
      break;
 80068e0:	bf00      	nop
  }

  if (err != 0U)
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d11e      	bne.n	8006926 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	88db      	ldrh	r3, [r3, #6]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d016      	beq.n	800691e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80068f0:	893b      	ldrh	r3, [r7, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00e      	beq.n	8006914 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	88da      	ldrh	r2, [r3, #6]
 80068fa:	893b      	ldrh	r3, [r7, #8]
 80068fc:	4293      	cmp	r3, r2
 80068fe:	bf28      	it	cs
 8006900:	4613      	movcs	r3, r2
 8006902:	b29b      	uxth	r3, r3
 8006904:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006906:	893b      	ldrh	r3, [r7, #8]
 8006908:	461a      	mov	r2, r3
 800690a:	68f9      	ldr	r1, [r7, #12]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fa5d 	bl	8006dcc <USBD_CtlSendData>
 8006912:	e009      	b.n	8006928 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f9e7 	bl	8006cea <USBD_CtlError>
 800691c:	e004      	b.n	8006928 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 faae 	bl	8006e80 <USBD_CtlSendStatus>
 8006924:	e000      	b.n	8006928 <USBD_GetDescriptor+0x2cc>
    return;
 8006926:	bf00      	nop
  }
}
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop

08006930 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	889b      	ldrh	r3, [r3, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d131      	bne.n	80069a6 <USBD_SetAddress+0x76>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	88db      	ldrh	r3, [r3, #6]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d12d      	bne.n	80069a6 <USBD_SetAddress+0x76>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	885b      	ldrh	r3, [r3, #2]
 800694e:	2b7f      	cmp	r3, #127	; 0x7f
 8006950:	d829      	bhi.n	80069a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	885b      	ldrh	r3, [r3, #2]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800695c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b03      	cmp	r3, #3
 8006968:	d104      	bne.n	8006974 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f9bc 	bl	8006cea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006972:	e01d      	b.n	80069b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	7bfa      	ldrb	r2, [r7, #15]
 8006978:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fee9 	bl	8007758 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fa7a 	bl	8006e80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2202      	movs	r2, #2
 8006996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699a:	e009      	b.n	80069b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a4:	e004      	b.n	80069b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f99e 	bl	8006cea <USBD_CtlError>
  }
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	885b      	ldrh	r3, [r3, #2]
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	4b4e      	ldr	r3, [pc, #312]	; (8006b08 <USBD_SetConfig+0x150>)
 80069ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069d0:	4b4d      	ldr	r3, [pc, #308]	; (8006b08 <USBD_SetConfig+0x150>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d905      	bls.n	80069e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f985 	bl	8006cea <USBD_CtlError>
    return USBD_FAIL;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e08c      	b.n	8006afe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d002      	beq.n	80069f6 <USBD_SetConfig+0x3e>
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d029      	beq.n	8006a48 <USBD_SetConfig+0x90>
 80069f4:	e075      	b.n	8006ae2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80069f6:	4b44      	ldr	r3, [pc, #272]	; (8006b08 <USBD_SetConfig+0x150>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d020      	beq.n	8006a40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80069fe:	4b42      	ldr	r3, [pc, #264]	; (8006b08 <USBD_SetConfig+0x150>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a08:	4b3f      	ldr	r3, [pc, #252]	; (8006b08 <USBD_SetConfig+0x150>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fe ffe7 	bl	80059e2 <USBD_SetClassConfig>
 8006a14:	4603      	mov	r3, r0
 8006a16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d008      	beq.n	8006a30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f962 	bl	8006cea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a2e:	e065      	b.n	8006afc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fa25 	bl	8006e80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2203      	movs	r2, #3
 8006a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a3e:	e05d      	b.n	8006afc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fa1d 	bl	8006e80 <USBD_CtlSendStatus>
      break;
 8006a46:	e059      	b.n	8006afc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a48:	4b2f      	ldr	r3, [pc, #188]	; (8006b08 <USBD_SetConfig+0x150>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d112      	bne.n	8006a76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006a58:	4b2b      	ldr	r3, [pc, #172]	; (8006b08 <USBD_SetConfig+0x150>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a62:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <USBD_SetConfig+0x150>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7fe ffd6 	bl	8005a1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa06 	bl	8006e80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a74:	e042      	b.n	8006afc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006a76:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <USBD_SetConfig+0x150>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d02a      	beq.n	8006ada <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7fe ffc4 	bl	8005a1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006a92:	4b1d      	ldr	r3, [pc, #116]	; (8006b08 <USBD_SetConfig+0x150>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a9c:	4b1a      	ldr	r3, [pc, #104]	; (8006b08 <USBD_SetConfig+0x150>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fe ff9d 	bl	80059e2 <USBD_SetClassConfig>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00f      	beq.n	8006ad2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f918 	bl	8006cea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fe ffa9 	bl	8005a1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ad0:	e014      	b.n	8006afc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f9d4 	bl	8006e80 <USBD_CtlSendStatus>
      break;
 8006ad8:	e010      	b.n	8006afc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f9d0 	bl	8006e80 <USBD_CtlSendStatus>
      break;
 8006ae0:	e00c      	b.n	8006afc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f900 	bl	8006cea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006aea:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <USBD_SetConfig+0x150>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7fe ff92 	bl	8005a1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006af6:	2303      	movs	r3, #3
 8006af8:	73fb      	strb	r3, [r7, #15]
      break;
 8006afa:	bf00      	nop
  }

  return ret;
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	2000020c 	.word	0x2000020c

08006b0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	88db      	ldrh	r3, [r3, #6]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d004      	beq.n	8006b28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f8e2 	bl	8006cea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b26:	e023      	b.n	8006b70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	dc02      	bgt.n	8006b3a <USBD_GetConfig+0x2e>
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	dc03      	bgt.n	8006b40 <USBD_GetConfig+0x34>
 8006b38:	e015      	b.n	8006b66 <USBD_GetConfig+0x5a>
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d00b      	beq.n	8006b56 <USBD_GetConfig+0x4a>
 8006b3e:	e012      	b.n	8006b66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f93c 	bl	8006dcc <USBD_CtlSendData>
        break;
 8006b54:	e00c      	b.n	8006b70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f934 	bl	8006dcc <USBD_CtlSendData>
        break;
 8006b64:	e004      	b.n	8006b70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f8be 	bl	8006cea <USBD_CtlError>
        break;
 8006b6e:	bf00      	nop
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d81e      	bhi.n	8006bce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	88db      	ldrh	r3, [r3, #6]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d004      	beq.n	8006ba2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8a5 	bl	8006cea <USBD_CtlError>
        break;
 8006ba0:	e01a      	b.n	8006bd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d005      	beq.n	8006bbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f043 0202 	orr.w	r2, r3, #2
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f900 	bl	8006dcc <USBD_CtlSendData>
      break;
 8006bcc:	e004      	b.n	8006bd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f88a 	bl	8006cea <USBD_CtlError>
      break;
 8006bd6:	bf00      	nop
  }
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	885b      	ldrh	r3, [r3, #2]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d107      	bne.n	8006c02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f940 	bl	8006e80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006c00:	e013      	b.n	8006c2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	885b      	ldrh	r3, [r3, #2]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d10b      	bne.n	8006c22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	889b      	ldrh	r3, [r3, #4]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f930 	bl	8006e80 <USBD_CtlSendStatus>
}
 8006c20:	e003      	b.n	8006c2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f860 	bl	8006cea <USBD_CtlError>
}
 8006c2a:	bf00      	nop
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d80b      	bhi.n	8006c62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	885b      	ldrh	r3, [r3, #2]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d10c      	bne.n	8006c6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f910 	bl	8006e80 <USBD_CtlSendStatus>
      }
      break;
 8006c60:	e004      	b.n	8006c6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f840 	bl	8006cea <USBD_CtlError>
      break;
 8006c6a:	e000      	b.n	8006c6e <USBD_ClrFeature+0x3c>
      break;
 8006c6c:	bf00      	nop
  }
}
 8006c6e:	bf00      	nop
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	781a      	ldrb	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	781a      	ldrb	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f7ff fa41 	bl	8006128 <SWAPBYTE>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	461a      	mov	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff fa34 	bl	8006128 <SWAPBYTE>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7ff fa27 	bl	8006128 <SWAPBYTE>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	461a      	mov	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	80da      	strh	r2, [r3, #6]
}
 8006ce2:	bf00      	nop
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fcc4 	bl	8007684 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fcc0 	bl	8007684 <USBD_LL_StallEP>
}
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d036      	beq.n	8006d90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d26:	6938      	ldr	r0, [r7, #16]
 8006d28:	f000 f836 	bl	8006d98 <USBD_GetLen>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	3301      	adds	r3, #1
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	4413      	add	r3, r2
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	7812      	ldrb	r2, [r2, #0]
 8006d44:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	4413      	add	r3, r2
 8006d52:	2203      	movs	r2, #3
 8006d54:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d5c:	e013      	b.n	8006d86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	4413      	add	r3, r2
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	7812      	ldrb	r2, [r2, #0]
 8006d68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	613b      	str	r3, [r7, #16]
    idx++;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	3301      	adds	r3, #1
 8006d74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
 8006d82:	3301      	adds	r3, #1
 8006d84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e7      	bne.n	8006d5e <USBD_GetString+0x52>
 8006d8e:	e000      	b.n	8006d92 <USBD_GetString+0x86>
    return;
 8006d90:	bf00      	nop
  }
}
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006da8:	e005      	b.n	8006db6 <USBD_GetLen+0x1e>
  {
    len++;
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	3301      	adds	r3, #1
 8006dae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	3301      	adds	r3, #1
 8006db4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f5      	bne.n	8006daa <USBD_GetLen+0x12>
  }

  return len;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	2100      	movs	r1, #0
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 fccf 	bl	8007796 <USBD_LL_Transmit>

  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	2100      	movs	r1, #0
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fcbe 	bl	8007796 <USBD_LL_Transmit>

  return USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2203      	movs	r2, #3
 8006e34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fcc2 	bl	80077d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	2100      	movs	r1, #0
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 fcb1 	bl	80077d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2204      	movs	r2, #4
 8006e8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e90:	2300      	movs	r3, #0
 8006e92:	2200      	movs	r2, #0
 8006e94:	2100      	movs	r1, #0
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fc7d 	bl	8007796 <USBD_LL_Transmit>

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2205      	movs	r2, #5
 8006eb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2100      	movs	r1, #0
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fc8b 	bl	80077d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4912      	ldr	r1, [pc, #72]	; (8006f1c <MX_USB_DEVICE_Init+0x50>)
 8006ed4:	4812      	ldr	r0, [pc, #72]	; (8006f20 <MX_USB_DEVICE_Init+0x54>)
 8006ed6:	f7fe fd07 	bl	80058e8 <USBD_Init>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ee0:	f7f9 fc2c 	bl	800073c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ee4:	490f      	ldr	r1, [pc, #60]	; (8006f24 <MX_USB_DEVICE_Init+0x58>)
 8006ee6:	480e      	ldr	r0, [pc, #56]	; (8006f20 <MX_USB_DEVICE_Init+0x54>)
 8006ee8:	f7fe fd2e 	bl	8005948 <USBD_RegisterClass>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ef2:	f7f9 fc23 	bl	800073c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ef6:	490c      	ldr	r1, [pc, #48]	; (8006f28 <MX_USB_DEVICE_Init+0x5c>)
 8006ef8:	4809      	ldr	r0, [pc, #36]	; (8006f20 <MX_USB_DEVICE_Init+0x54>)
 8006efa:	f7fe fc65 	bl	80057c8 <USBD_CDC_RegisterInterface>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f04:	f7f9 fc1a 	bl	800073c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f08:	4805      	ldr	r0, [pc, #20]	; (8006f20 <MX_USB_DEVICE_Init+0x54>)
 8006f0a:	f7fe fd53 	bl	80059b4 <USBD_Start>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f14:	f7f9 fc12 	bl	800073c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f18:	bf00      	nop
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	200000ac 	.word	0x200000ac
 8006f20:	20000210 	.word	0x20000210
 8006f24:	20000018 	.word	0x20000018
 8006f28:	20000098 	.word	0x20000098

08006f2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f30:	2200      	movs	r2, #0
 8006f32:	4905      	ldr	r1, [pc, #20]	; (8006f48 <CDC_Init_FS+0x1c>)
 8006f34:	4805      	ldr	r0, [pc, #20]	; (8006f4c <CDC_Init_FS+0x20>)
 8006f36:	f7fe fc61 	bl	80057fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f3a:	4905      	ldr	r1, [pc, #20]	; (8006f50 <CDC_Init_FS+0x24>)
 8006f3c:	4803      	ldr	r0, [pc, #12]	; (8006f4c <CDC_Init_FS+0x20>)
 8006f3e:	f7fe fc7f 	bl	8005840 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006f42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20000cec 	.word	0x20000cec
 8006f4c:	20000210 	.word	0x20000210
 8006f50:	200004ec 	.word	0x200004ec

08006f54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006f58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	6039      	str	r1, [r7, #0]
 8006f6e:	71fb      	strb	r3, [r7, #7]
 8006f70:	4613      	mov	r3, r2
 8006f72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	2b23      	cmp	r3, #35	; 0x23
 8006f78:	d84a      	bhi.n	8007010 <CDC_Control_FS+0xac>
 8006f7a:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <CDC_Control_FS+0x1c>)
 8006f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f80:	08007011 	.word	0x08007011
 8006f84:	08007011 	.word	0x08007011
 8006f88:	08007011 	.word	0x08007011
 8006f8c:	08007011 	.word	0x08007011
 8006f90:	08007011 	.word	0x08007011
 8006f94:	08007011 	.word	0x08007011
 8006f98:	08007011 	.word	0x08007011
 8006f9c:	08007011 	.word	0x08007011
 8006fa0:	08007011 	.word	0x08007011
 8006fa4:	08007011 	.word	0x08007011
 8006fa8:	08007011 	.word	0x08007011
 8006fac:	08007011 	.word	0x08007011
 8006fb0:	08007011 	.word	0x08007011
 8006fb4:	08007011 	.word	0x08007011
 8006fb8:	08007011 	.word	0x08007011
 8006fbc:	08007011 	.word	0x08007011
 8006fc0:	08007011 	.word	0x08007011
 8006fc4:	08007011 	.word	0x08007011
 8006fc8:	08007011 	.word	0x08007011
 8006fcc:	08007011 	.word	0x08007011
 8006fd0:	08007011 	.word	0x08007011
 8006fd4:	08007011 	.word	0x08007011
 8006fd8:	08007011 	.word	0x08007011
 8006fdc:	08007011 	.word	0x08007011
 8006fe0:	08007011 	.word	0x08007011
 8006fe4:	08007011 	.word	0x08007011
 8006fe8:	08007011 	.word	0x08007011
 8006fec:	08007011 	.word	0x08007011
 8006ff0:	08007011 	.word	0x08007011
 8006ff4:	08007011 	.word	0x08007011
 8006ff8:	08007011 	.word	0x08007011
 8006ffc:	08007011 	.word	0x08007011
 8007000:	08007011 	.word	0x08007011
 8007004:	08007011 	.word	0x08007011
 8007008:	08007011 	.word	0x08007011
 800700c:	08007011 	.word	0x08007011
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007010:	bf00      	nop
  }

  return (USBD_OK);
 8007012:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4809      	ldr	r0, [pc, #36]	; (8007054 <CDC_Receive_FS+0x34>)
 800702e:	f7fe fc07 	bl	8005840 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007032:	4808      	ldr	r0, [pc, #32]	; (8007054 <CDC_Receive_FS+0x34>)
 8007034:	f7fe fc22 	bl	800587c <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	73fb      	strb	r3, [r7, #15]
  memcpy (receivebuffer, Buf, len);
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	461a      	mov	r2, r3
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4804      	ldr	r0, [pc, #16]	; (8007058 <CDC_Receive_FS+0x38>)
 8007046:	f000 fc6d 	bl	8007924 <memcpy>
  return (USBD_OK);
 800704a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	20000210 	.word	0x20000210
 8007058:	2000017c 	.word	0x2000017c

0800705c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	4613      	mov	r3, r2
 8007068:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800706e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007072:	4618      	mov	r0, r3
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
	...

08007080 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	6039      	str	r1, [r7, #0]
 800708a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2212      	movs	r2, #18
 8007090:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007092:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007094:	4618      	mov	r0, r3
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	200000c8 	.word	0x200000c8

080070a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	6039      	str	r1, [r7, #0]
 80070ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2204      	movs	r2, #4
 80070b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070b6:	4b03      	ldr	r3, [pc, #12]	; (80070c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	200000dc 	.word	0x200000dc

080070c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	6039      	str	r1, [r7, #0]
 80070d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d105      	bne.n	80070e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	4907      	ldr	r1, [pc, #28]	; (80070fc <USBD_FS_ProductStrDescriptor+0x34>)
 80070de:	4808      	ldr	r0, [pc, #32]	; (8007100 <USBD_FS_ProductStrDescriptor+0x38>)
 80070e0:	f7ff fe14 	bl	8006d0c <USBD_GetString>
 80070e4:	e004      	b.n	80070f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	4904      	ldr	r1, [pc, #16]	; (80070fc <USBD_FS_ProductStrDescriptor+0x34>)
 80070ea:	4805      	ldr	r0, [pc, #20]	; (8007100 <USBD_FS_ProductStrDescriptor+0x38>)
 80070ec:	f7ff fe0e 	bl	8006d0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80070f0:	4b02      	ldr	r3, [pc, #8]	; (80070fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200014ec 	.word	0x200014ec
 8007100:	08007a80 	.word	0x08007a80

08007104 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	6039      	str	r1, [r7, #0]
 800710e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	4904      	ldr	r1, [pc, #16]	; (8007124 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007114:	4804      	ldr	r0, [pc, #16]	; (8007128 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007116:	f7ff fdf9 	bl	8006d0c <USBD_GetString>
  return USBD_StrDesc;
 800711a:	4b02      	ldr	r3, [pc, #8]	; (8007124 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	200014ec 	.word	0x200014ec
 8007128:	08007a98 	.word	0x08007a98

0800712c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	6039      	str	r1, [r7, #0]
 8007136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	221a      	movs	r2, #26
 800713c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800713e:	f000 f843 	bl	80071c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007142:	4b02      	ldr	r3, [pc, #8]	; (800714c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	200000e0 	.word	0x200000e0

08007150 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	6039      	str	r1, [r7, #0]
 800715a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d105      	bne.n	800716e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	4907      	ldr	r1, [pc, #28]	; (8007184 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007166:	4808      	ldr	r0, [pc, #32]	; (8007188 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007168:	f7ff fdd0 	bl	8006d0c <USBD_GetString>
 800716c:	e004      	b.n	8007178 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4904      	ldr	r1, [pc, #16]	; (8007184 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007172:	4805      	ldr	r0, [pc, #20]	; (8007188 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007174:	f7ff fdca 	bl	8006d0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007178:	4b02      	ldr	r3, [pc, #8]	; (8007184 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	200014ec 	.word	0x200014ec
 8007188:	08007aac 	.word	0x08007aac

0800718c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	6039      	str	r1, [r7, #0]
 8007196:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	4907      	ldr	r1, [pc, #28]	; (80071c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071a2:	4808      	ldr	r0, [pc, #32]	; (80071c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071a4:	f7ff fdb2 	bl	8006d0c <USBD_GetString>
 80071a8:	e004      	b.n	80071b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	4904      	ldr	r1, [pc, #16]	; (80071c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071ae:	4805      	ldr	r0, [pc, #20]	; (80071c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071b0:	f7ff fdac 	bl	8006d0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80071b4:	4b02      	ldr	r3, [pc, #8]	; (80071c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	200014ec 	.word	0x200014ec
 80071c4:	08007ab8 	.word	0x08007ab8

080071c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071ce:	4b0f      	ldr	r3, [pc, #60]	; (800720c <Get_SerialNum+0x44>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071d4:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <Get_SerialNum+0x48>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071da:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <Get_SerialNum+0x4c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4413      	add	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d009      	beq.n	8007202 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071ee:	2208      	movs	r2, #8
 80071f0:	4909      	ldr	r1, [pc, #36]	; (8007218 <Get_SerialNum+0x50>)
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 f814 	bl	8007220 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071f8:	2204      	movs	r2, #4
 80071fa:	4908      	ldr	r1, [pc, #32]	; (800721c <Get_SerialNum+0x54>)
 80071fc:	68b8      	ldr	r0, [r7, #8]
 80071fe:	f000 f80f 	bl	8007220 <IntToUnicode>
  }
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	1fff7a10 	.word	0x1fff7a10
 8007210:	1fff7a14 	.word	0x1fff7a14
 8007214:	1fff7a18 	.word	0x1fff7a18
 8007218:	200000e2 	.word	0x200000e2
 800721c:	200000f2 	.word	0x200000f2

08007220 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007232:	2300      	movs	r3, #0
 8007234:	75fb      	strb	r3, [r7, #23]
 8007236:	e027      	b.n	8007288 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	0f1b      	lsrs	r3, r3, #28
 800723c:	2b09      	cmp	r3, #9
 800723e:	d80b      	bhi.n	8007258 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	0f1b      	lsrs	r3, r3, #28
 8007244:	b2da      	uxtb	r2, r3
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	4619      	mov	r1, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	440b      	add	r3, r1
 8007250:	3230      	adds	r2, #48	; 0x30
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	e00a      	b.n	800726e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	0f1b      	lsrs	r3, r3, #28
 800725c:	b2da      	uxtb	r2, r3
 800725e:	7dfb      	ldrb	r3, [r7, #23]
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	4619      	mov	r1, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	440b      	add	r3, r1
 8007268:	3237      	adds	r2, #55	; 0x37
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	3301      	adds	r3, #1
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	4413      	add	r3, r2
 800727e:	2200      	movs	r2, #0
 8007280:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	3301      	adds	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
 8007288:	7dfa      	ldrb	r2, [r7, #23]
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	429a      	cmp	r2, r3
 800728e:	d3d3      	bcc.n	8007238 <IntToUnicode+0x18>
  }
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
	...

080072a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08a      	sub	sp, #40	; 0x28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072a8:	f107 0314 	add.w	r3, r7, #20
 80072ac:	2200      	movs	r2, #0
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	605a      	str	r2, [r3, #4]
 80072b2:	609a      	str	r2, [r3, #8]
 80072b4:	60da      	str	r2, [r3, #12]
 80072b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072c0:	d13a      	bne.n	8007338 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072c2:	2300      	movs	r3, #0
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <HAL_PCD_MspInit+0xa0>)
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	4a1d      	ldr	r2, [pc, #116]	; (8007340 <HAL_PCD_MspInit+0xa0>)
 80072cc:	f043 0301 	orr.w	r3, r3, #1
 80072d0:	6313      	str	r3, [r2, #48]	; 0x30
 80072d2:	4b1b      	ldr	r3, [pc, #108]	; (8007340 <HAL_PCD_MspInit+0xa0>)
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80072de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80072e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e4:	2302      	movs	r3, #2
 80072e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e8:	2300      	movs	r3, #0
 80072ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ec:	2303      	movs	r3, #3
 80072ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80072f0:	230a      	movs	r3, #10
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072f4:	f107 0314 	add.w	r3, r7, #20
 80072f8:	4619      	mov	r1, r3
 80072fa:	4812      	ldr	r0, [pc, #72]	; (8007344 <HAL_PCD_MspInit+0xa4>)
 80072fc:	f7f9 fcc0 	bl	8000c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007300:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <HAL_PCD_MspInit+0xa0>)
 8007302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007304:	4a0e      	ldr	r2, [pc, #56]	; (8007340 <HAL_PCD_MspInit+0xa0>)
 8007306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730a:	6353      	str	r3, [r2, #52]	; 0x34
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <HAL_PCD_MspInit+0xa0>)
 8007312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007314:	4a0a      	ldr	r2, [pc, #40]	; (8007340 <HAL_PCD_MspInit+0xa0>)
 8007316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800731a:	6453      	str	r3, [r2, #68]	; 0x44
 800731c:	4b08      	ldr	r3, [pc, #32]	; (8007340 <HAL_PCD_MspInit+0xa0>)
 800731e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007328:	2200      	movs	r2, #0
 800732a:	2100      	movs	r1, #0
 800732c:	2043      	movs	r0, #67	; 0x43
 800732e:	f7f9 fc70 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007332:	2043      	movs	r0, #67	; 0x43
 8007334:	f7f9 fc89 	bl	8000c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007338:	bf00      	nop
 800733a:	3728      	adds	r7, #40	; 0x28
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	40023800 	.word	0x40023800
 8007344:	40020000 	.word	0x40020000

08007348 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800735c:	4619      	mov	r1, r3
 800735e:	4610      	mov	r0, r2
 8007360:	f7fe fb75 	bl	8005a4e <USBD_LL_SetupStage>
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4613      	mov	r3, r2
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	440b      	add	r3, r1
 800738c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	4619      	mov	r1, r3
 8007396:	f7fe fbaf 	bl	8005af8 <USBD_LL_DataOutStage>
}
 800739a:	bf00      	nop
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80073b4:	78fa      	ldrb	r2, [r7, #3]
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	4613      	mov	r3, r2
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	334c      	adds	r3, #76	; 0x4c
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	78fb      	ldrb	r3, [r7, #3]
 80073c8:	4619      	mov	r1, r3
 80073ca:	f7fe fc48 	bl	8005c5e <USBD_LL_DataInStage>
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe fd7c 	bl	8005ee2 <USBD_LL_SOF>
}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80073fa:	2301      	movs	r3, #1
 80073fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d102      	bne.n	800740c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]
 800740a:	e008      	b.n	800741e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d102      	bne.n	800741a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
 8007418:	e001      	b.n	800741e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800741a:	f7f9 f98f 	bl	800073c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007424:	7bfa      	ldrb	r2, [r7, #15]
 8007426:	4611      	mov	r1, r2
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe fd1c 	bl	8005e66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007434:	4618      	mov	r0, r3
 8007436:	f7fe fcc4 	bl	8005dc2 <USBD_LL_Reset>
}
 800743a:	bf00      	nop
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fd17 	bl	8005e86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800746a:	f043 0301 	orr.w	r3, r3, #1
 800746e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007478:	4b04      	ldr	r3, [pc, #16]	; (800748c <HAL_PCD_SuspendCallback+0x48>)
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	4a03      	ldr	r2, [pc, #12]	; (800748c <HAL_PCD_SuspendCallback+0x48>)
 800747e:	f043 0306 	orr.w	r3, r3, #6
 8007482:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	e000ed00 	.word	0xe000ed00

08007490 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fd07 	bl	8005eb2 <USBD_LL_Resume>
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074be:	78fa      	ldrb	r2, [r7, #3]
 80074c0:	4611      	mov	r1, r2
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fe fd5f 	bl	8005f86 <USBD_LL_IsoOUTIncomplete>
}
 80074c8:	bf00      	nop
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074e2:	78fa      	ldrb	r2, [r7, #3]
 80074e4:	4611      	mov	r1, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe fd1b 	bl	8005f22 <USBD_LL_IsoINIncomplete>
}
 80074ec:	bf00      	nop
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe fd71 	bl	8005fea <USBD_LL_DevConnected>
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fd6e 	bl	8006000 <USBD_LL_DevDisconnected>
}
 8007524:	bf00      	nop
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d13c      	bne.n	80075b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800753c:	4a20      	ldr	r2, [pc, #128]	; (80075c0 <USBD_LL_Init+0x94>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a1e      	ldr	r2, [pc, #120]	; (80075c0 <USBD_LL_Init+0x94>)
 8007548:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800754c:	4b1c      	ldr	r3, [pc, #112]	; (80075c0 <USBD_LL_Init+0x94>)
 800754e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007552:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007554:	4b1a      	ldr	r3, [pc, #104]	; (80075c0 <USBD_LL_Init+0x94>)
 8007556:	2204      	movs	r2, #4
 8007558:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800755a:	4b19      	ldr	r3, [pc, #100]	; (80075c0 <USBD_LL_Init+0x94>)
 800755c:	2202      	movs	r2, #2
 800755e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007560:	4b17      	ldr	r3, [pc, #92]	; (80075c0 <USBD_LL_Init+0x94>)
 8007562:	2200      	movs	r2, #0
 8007564:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007566:	4b16      	ldr	r3, [pc, #88]	; (80075c0 <USBD_LL_Init+0x94>)
 8007568:	2202      	movs	r2, #2
 800756a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800756c:	4b14      	ldr	r3, [pc, #80]	; (80075c0 <USBD_LL_Init+0x94>)
 800756e:	2200      	movs	r2, #0
 8007570:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007572:	4b13      	ldr	r3, [pc, #76]	; (80075c0 <USBD_LL_Init+0x94>)
 8007574:	2200      	movs	r2, #0
 8007576:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007578:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <USBD_LL_Init+0x94>)
 800757a:	2200      	movs	r2, #0
 800757c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800757e:	4b10      	ldr	r3, [pc, #64]	; (80075c0 <USBD_LL_Init+0x94>)
 8007580:	2200      	movs	r2, #0
 8007582:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007584:	4b0e      	ldr	r3, [pc, #56]	; (80075c0 <USBD_LL_Init+0x94>)
 8007586:	2200      	movs	r2, #0
 8007588:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800758a:	480d      	ldr	r0, [pc, #52]	; (80075c0 <USBD_LL_Init+0x94>)
 800758c:	f7f9 fd14 	bl	8000fb8 <HAL_PCD_Init>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007596:	f7f9 f8d1 	bl	800073c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800759a:	2180      	movs	r1, #128	; 0x80
 800759c:	4808      	ldr	r0, [pc, #32]	; (80075c0 <USBD_LL_Init+0x94>)
 800759e:	f7fa ff6c 	bl	800247a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075a2:	2240      	movs	r2, #64	; 0x40
 80075a4:	2100      	movs	r1, #0
 80075a6:	4806      	ldr	r0, [pc, #24]	; (80075c0 <USBD_LL_Init+0x94>)
 80075a8:	f7fa ff20 	bl	80023ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075ac:	2280      	movs	r2, #128	; 0x80
 80075ae:	2101      	movs	r1, #1
 80075b0:	4803      	ldr	r0, [pc, #12]	; (80075c0 <USBD_LL_Init+0x94>)
 80075b2:	f7fa ff1b 	bl	80023ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	200016ec 	.word	0x200016ec

080075c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075da:	4618      	mov	r0, r3
 80075dc:	f7f9 fe09 	bl	80011f2 <HAL_PCD_Start>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 f942 	bl	8007870 <USBD_Get_USB_Status>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	4608      	mov	r0, r1
 8007604:	4611      	mov	r1, r2
 8007606:	461a      	mov	r2, r3
 8007608:	4603      	mov	r3, r0
 800760a:	70fb      	strb	r3, [r7, #3]
 800760c:	460b      	mov	r3, r1
 800760e:	70bb      	strb	r3, [r7, #2]
 8007610:	4613      	mov	r3, r2
 8007612:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007622:	78bb      	ldrb	r3, [r7, #2]
 8007624:	883a      	ldrh	r2, [r7, #0]
 8007626:	78f9      	ldrb	r1, [r7, #3]
 8007628:	f7fa fada 	bl	8001be0 <HAL_PCD_EP_Open>
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 f91c 	bl	8007870 <USBD_Get_USB_Status>
 8007638:	4603      	mov	r3, r0
 800763a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800763c:	7bbb      	ldrb	r3, [r7, #14]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	4611      	mov	r1, r2
 8007664:	4618      	mov	r0, r3
 8007666:	f7fa fb23 	bl	8001cb0 <HAL_PCD_EP_Close>
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f8fd 	bl	8007870 <USBD_Get_USB_Status>
 8007676:	4603      	mov	r3, r0
 8007678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800767a:	7bbb      	ldrb	r3, [r7, #14]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800769e:	78fa      	ldrb	r2, [r7, #3]
 80076a0:	4611      	mov	r1, r2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fa fbfb 	bl	8001e9e <HAL_PCD_EP_SetStall>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 f8de 	bl	8007870 <USBD_Get_USB_Status>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076dc:	78fa      	ldrb	r2, [r7, #3]
 80076de:	4611      	mov	r1, r2
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fa fc40 	bl	8001f66 <HAL_PCD_EP_ClrStall>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 f8bf 	bl	8007870 <USBD_Get_USB_Status>
 80076f2:	4603      	mov	r3, r0
 80076f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007712:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007718:	2b00      	cmp	r3, #0
 800771a:	da0b      	bge.n	8007734 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	4613      	mov	r3, r2
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	333e      	adds	r3, #62	; 0x3e
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	e00b      	b.n	800774c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800773a:	68f9      	ldr	r1, [r7, #12]
 800773c:	4613      	mov	r3, r2
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	440b      	add	r3, r1
 8007746:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800774a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007772:	78fa      	ldrb	r2, [r7, #3]
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f7fa fa0d 	bl	8001b96 <HAL_PCD_SetAddress>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 f874 	bl	8007870 <USBD_Get_USB_Status>
 8007788:	4603      	mov	r3, r0
 800778a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800778c:	7bbb      	ldrb	r3, [r7, #14]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b086      	sub	sp, #24
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	460b      	mov	r3, r1
 80077a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077b4:	7af9      	ldrb	r1, [r7, #11]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	f7fa fb26 	bl	8001e0a <HAL_PCD_EP_Transmit>
 80077be:	4603      	mov	r3, r0
 80077c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 f853 	bl	8007870 <USBD_Get_USB_Status>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	607a      	str	r2, [r7, #4]
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	460b      	mov	r3, r1
 80077e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077f6:	7af9      	ldrb	r1, [r7, #11]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	f7fa faa2 	bl	8001d44 <HAL_PCD_EP_Receive>
 8007800:	4603      	mov	r3, r0
 8007802:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	4618      	mov	r0, r3
 8007808:	f000 f832 	bl	8007870 <USBD_Get_USB_Status>
 800780c:	4603      	mov	r3, r0
 800780e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007810:	7dbb      	ldrb	r3, [r7, #22]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	460b      	mov	r3, r1
 8007824:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800782c:	78fa      	ldrb	r2, [r7, #3]
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f7fa fad2 	bl	8001dda <HAL_PCD_EP_GetRxCount>
 8007836:	4603      	mov	r3, r0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007848:	4b03      	ldr	r3, [pc, #12]	; (8007858 <USBD_static_malloc+0x18>)
}
 800784a:	4618      	mov	r0, r3
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	20001bf8 	.word	0x20001bf8

0800785c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]

}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800787e:	79fb      	ldrb	r3, [r7, #7]
 8007880:	2b03      	cmp	r3, #3
 8007882:	d817      	bhi.n	80078b4 <USBD_Get_USB_Status+0x44>
 8007884:	a201      	add	r2, pc, #4	; (adr r2, 800788c <USBD_Get_USB_Status+0x1c>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	0800789d 	.word	0x0800789d
 8007890:	080078a3 	.word	0x080078a3
 8007894:	080078a9 	.word	0x080078a9
 8007898:	080078af 	.word	0x080078af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
    break;
 80078a0:	e00b      	b.n	80078ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078a2:	2303      	movs	r3, #3
 80078a4:	73fb      	strb	r3, [r7, #15]
    break;
 80078a6:	e008      	b.n	80078ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078a8:	2301      	movs	r3, #1
 80078aa:	73fb      	strb	r3, [r7, #15]
    break;
 80078ac:	e005      	b.n	80078ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078ae:	2303      	movs	r3, #3
 80078b0:	73fb      	strb	r3, [r7, #15]
    break;
 80078b2:	e002      	b.n	80078ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078b4:	2303      	movs	r3, #3
 80078b6:	73fb      	strb	r3, [r7, #15]
    break;
 80078b8:	bf00      	nop
  }
  return usb_status;
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <atoi>:
 80078c8:	220a      	movs	r2, #10
 80078ca:	2100      	movs	r1, #0
 80078cc:	f000 b8c2 	b.w	8007a54 <strtol>

080078d0 <__errno>:
 80078d0:	4b01      	ldr	r3, [pc, #4]	; (80078d8 <__errno+0x8>)
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	200000fc 	.word	0x200000fc

080078dc <__libc_init_array>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	4d0d      	ldr	r5, [pc, #52]	; (8007914 <__libc_init_array+0x38>)
 80078e0:	4c0d      	ldr	r4, [pc, #52]	; (8007918 <__libc_init_array+0x3c>)
 80078e2:	1b64      	subs	r4, r4, r5
 80078e4:	10a4      	asrs	r4, r4, #2
 80078e6:	2600      	movs	r6, #0
 80078e8:	42a6      	cmp	r6, r4
 80078ea:	d109      	bne.n	8007900 <__libc_init_array+0x24>
 80078ec:	4d0b      	ldr	r5, [pc, #44]	; (800791c <__libc_init_array+0x40>)
 80078ee:	4c0c      	ldr	r4, [pc, #48]	; (8007920 <__libc_init_array+0x44>)
 80078f0:	f000 f8ba 	bl	8007a68 <_init>
 80078f4:	1b64      	subs	r4, r4, r5
 80078f6:	10a4      	asrs	r4, r4, #2
 80078f8:	2600      	movs	r6, #0
 80078fa:	42a6      	cmp	r6, r4
 80078fc:	d105      	bne.n	800790a <__libc_init_array+0x2e>
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	f855 3b04 	ldr.w	r3, [r5], #4
 8007904:	4798      	blx	r3
 8007906:	3601      	adds	r6, #1
 8007908:	e7ee      	b.n	80078e8 <__libc_init_array+0xc>
 800790a:	f855 3b04 	ldr.w	r3, [r5], #4
 800790e:	4798      	blx	r3
 8007910:	3601      	adds	r6, #1
 8007912:	e7f2      	b.n	80078fa <__libc_init_array+0x1e>
 8007914:	08007be4 	.word	0x08007be4
 8007918:	08007be4 	.word	0x08007be4
 800791c:	08007be4 	.word	0x08007be4
 8007920:	08007be8 	.word	0x08007be8

08007924 <memcpy>:
 8007924:	440a      	add	r2, r1
 8007926:	4291      	cmp	r1, r2
 8007928:	f100 33ff 	add.w	r3, r0, #4294967295
 800792c:	d100      	bne.n	8007930 <memcpy+0xc>
 800792e:	4770      	bx	lr
 8007930:	b510      	push	{r4, lr}
 8007932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800793a:	4291      	cmp	r1, r2
 800793c:	d1f9      	bne.n	8007932 <memcpy+0xe>
 800793e:	bd10      	pop	{r4, pc}

08007940 <memset>:
 8007940:	4402      	add	r2, r0
 8007942:	4603      	mov	r3, r0
 8007944:	4293      	cmp	r3, r2
 8007946:	d100      	bne.n	800794a <memset+0xa>
 8007948:	4770      	bx	lr
 800794a:	f803 1b01 	strb.w	r1, [r3], #1
 800794e:	e7f9      	b.n	8007944 <memset+0x4>

08007950 <_strtol_l.constprop.0>:
 8007950:	2b01      	cmp	r3, #1
 8007952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007956:	d001      	beq.n	800795c <_strtol_l.constprop.0+0xc>
 8007958:	2b24      	cmp	r3, #36	; 0x24
 800795a:	d906      	bls.n	800796a <_strtol_l.constprop.0+0x1a>
 800795c:	f7ff ffb8 	bl	80078d0 <__errno>
 8007960:	2316      	movs	r3, #22
 8007962:	6003      	str	r3, [r0, #0]
 8007964:	2000      	movs	r0, #0
 8007966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a50 <_strtol_l.constprop.0+0x100>
 800796e:	460d      	mov	r5, r1
 8007970:	462e      	mov	r6, r5
 8007972:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007976:	f814 700c 	ldrb.w	r7, [r4, ip]
 800797a:	f017 0708 	ands.w	r7, r7, #8
 800797e:	d1f7      	bne.n	8007970 <_strtol_l.constprop.0+0x20>
 8007980:	2c2d      	cmp	r4, #45	; 0x2d
 8007982:	d132      	bne.n	80079ea <_strtol_l.constprop.0+0x9a>
 8007984:	782c      	ldrb	r4, [r5, #0]
 8007986:	2701      	movs	r7, #1
 8007988:	1cb5      	adds	r5, r6, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d05b      	beq.n	8007a46 <_strtol_l.constprop.0+0xf6>
 800798e:	2b10      	cmp	r3, #16
 8007990:	d109      	bne.n	80079a6 <_strtol_l.constprop.0+0x56>
 8007992:	2c30      	cmp	r4, #48	; 0x30
 8007994:	d107      	bne.n	80079a6 <_strtol_l.constprop.0+0x56>
 8007996:	782c      	ldrb	r4, [r5, #0]
 8007998:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800799c:	2c58      	cmp	r4, #88	; 0x58
 800799e:	d14d      	bne.n	8007a3c <_strtol_l.constprop.0+0xec>
 80079a0:	786c      	ldrb	r4, [r5, #1]
 80079a2:	2310      	movs	r3, #16
 80079a4:	3502      	adds	r5, #2
 80079a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80079aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80079ae:	f04f 0c00 	mov.w	ip, #0
 80079b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80079b6:	4666      	mov	r6, ip
 80079b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80079bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80079c0:	f1be 0f09 	cmp.w	lr, #9
 80079c4:	d816      	bhi.n	80079f4 <_strtol_l.constprop.0+0xa4>
 80079c6:	4674      	mov	r4, lr
 80079c8:	42a3      	cmp	r3, r4
 80079ca:	dd24      	ble.n	8007a16 <_strtol_l.constprop.0+0xc6>
 80079cc:	f1bc 0f00 	cmp.w	ip, #0
 80079d0:	db1e      	blt.n	8007a10 <_strtol_l.constprop.0+0xc0>
 80079d2:	45b1      	cmp	r9, r6
 80079d4:	d31c      	bcc.n	8007a10 <_strtol_l.constprop.0+0xc0>
 80079d6:	d101      	bne.n	80079dc <_strtol_l.constprop.0+0x8c>
 80079d8:	45a2      	cmp	sl, r4
 80079da:	db19      	blt.n	8007a10 <_strtol_l.constprop.0+0xc0>
 80079dc:	fb06 4603 	mla	r6, r6, r3, r4
 80079e0:	f04f 0c01 	mov.w	ip, #1
 80079e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079e8:	e7e8      	b.n	80079bc <_strtol_l.constprop.0+0x6c>
 80079ea:	2c2b      	cmp	r4, #43	; 0x2b
 80079ec:	bf04      	itt	eq
 80079ee:	782c      	ldrbeq	r4, [r5, #0]
 80079f0:	1cb5      	addeq	r5, r6, #2
 80079f2:	e7ca      	b.n	800798a <_strtol_l.constprop.0+0x3a>
 80079f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80079f8:	f1be 0f19 	cmp.w	lr, #25
 80079fc:	d801      	bhi.n	8007a02 <_strtol_l.constprop.0+0xb2>
 80079fe:	3c37      	subs	r4, #55	; 0x37
 8007a00:	e7e2      	b.n	80079c8 <_strtol_l.constprop.0+0x78>
 8007a02:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007a06:	f1be 0f19 	cmp.w	lr, #25
 8007a0a:	d804      	bhi.n	8007a16 <_strtol_l.constprop.0+0xc6>
 8007a0c:	3c57      	subs	r4, #87	; 0x57
 8007a0e:	e7db      	b.n	80079c8 <_strtol_l.constprop.0+0x78>
 8007a10:	f04f 3cff 	mov.w	ip, #4294967295
 8007a14:	e7e6      	b.n	80079e4 <_strtol_l.constprop.0+0x94>
 8007a16:	f1bc 0f00 	cmp.w	ip, #0
 8007a1a:	da05      	bge.n	8007a28 <_strtol_l.constprop.0+0xd8>
 8007a1c:	2322      	movs	r3, #34	; 0x22
 8007a1e:	6003      	str	r3, [r0, #0]
 8007a20:	4646      	mov	r6, r8
 8007a22:	b942      	cbnz	r2, 8007a36 <_strtol_l.constprop.0+0xe6>
 8007a24:	4630      	mov	r0, r6
 8007a26:	e79e      	b.n	8007966 <_strtol_l.constprop.0+0x16>
 8007a28:	b107      	cbz	r7, 8007a2c <_strtol_l.constprop.0+0xdc>
 8007a2a:	4276      	negs	r6, r6
 8007a2c:	2a00      	cmp	r2, #0
 8007a2e:	d0f9      	beq.n	8007a24 <_strtol_l.constprop.0+0xd4>
 8007a30:	f1bc 0f00 	cmp.w	ip, #0
 8007a34:	d000      	beq.n	8007a38 <_strtol_l.constprop.0+0xe8>
 8007a36:	1e69      	subs	r1, r5, #1
 8007a38:	6011      	str	r1, [r2, #0]
 8007a3a:	e7f3      	b.n	8007a24 <_strtol_l.constprop.0+0xd4>
 8007a3c:	2430      	movs	r4, #48	; 0x30
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1b1      	bne.n	80079a6 <_strtol_l.constprop.0+0x56>
 8007a42:	2308      	movs	r3, #8
 8007a44:	e7af      	b.n	80079a6 <_strtol_l.constprop.0+0x56>
 8007a46:	2c30      	cmp	r4, #48	; 0x30
 8007a48:	d0a5      	beq.n	8007996 <_strtol_l.constprop.0+0x46>
 8007a4a:	230a      	movs	r3, #10
 8007a4c:	e7ab      	b.n	80079a6 <_strtol_l.constprop.0+0x56>
 8007a4e:	bf00      	nop
 8007a50:	08007ad9 	.word	0x08007ad9

08007a54 <strtol>:
 8007a54:	4613      	mov	r3, r2
 8007a56:	460a      	mov	r2, r1
 8007a58:	4601      	mov	r1, r0
 8007a5a:	4802      	ldr	r0, [pc, #8]	; (8007a64 <strtol+0x10>)
 8007a5c:	6800      	ldr	r0, [r0, #0]
 8007a5e:	f7ff bf77 	b.w	8007950 <_strtol_l.constprop.0>
 8007a62:	bf00      	nop
 8007a64:	200000fc 	.word	0x200000fc

08007a68 <_init>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	bf00      	nop
 8007a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6e:	bc08      	pop	{r3}
 8007a70:	469e      	mov	lr, r3
 8007a72:	4770      	bx	lr

08007a74 <_fini>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr
